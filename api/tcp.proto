syntax = "proto3";

option go_package = "girhub.com/gernest/tt/api";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";

message ConfigRequest {}

message DeleteRequest { repeated string routes = 1; }

message JoinRequest {
  enum Suffrage {
    VOTER = 0;
    NOT_VOTER = 1;
  }
  string node_id = 1;
  string address = 2;
  Suffrage suffrage = 3;
}

message JoinResponse {}

// Proxy defines admin service for configuraing and managing the server. This
// servic  runs in a distributed mode.
service Proxy {
  rpc Get(ConfigRequest) returns (Config);
  rpc Put(Config) returns (Response);
  rpc Post(Config) returns (Response);
  rpc Delete(DeleteRequest) returns (Response);

  // raft
  rpc Join(JoinRequest) returns (JoinResponse);
}

message Raft {
  message KeyValue {
    enum Action {
      GET = 0;
      SET = 1;
      PUT = 2;
      POST = 3;
      DELETE = 4;
    }
    message Context {
      bytes key = 1;
      bytes value = 2;
      uint64 expires_at = 3;
    }
    Action action = 1;
    Context context = 2;
  }

  message Log {
    oneof entry { KeyValue key_value = 1; }
  }
}

message Store {
  message SetRequest {
    bytes key = 1;
    bytes value = 2;
    uint64 expires_at = 3;
  }
  message SetResponse {}

  message GetRequest { bytes key = 1; }
  message GetResponse {
    bytes value = 1;
    uint64 expires_at = 2;
  }
}

service Storage {
  rpc Set(Store.SetRequest) returns (Store.SetRequest);
  rpc Get(Store.GetRequest) returns (Store.GetResponse);
}

message Response {
  oneof result {
    bool ok = 1;
    string error = 2;
  }
}

message Config {
  string id = 2;
  repeated Route routes = 1;
}

message WeightedAddr {
  Address addr = 1;
  int32 weight = 3;
  map<string, string> metric_labels = 4;
}

message Address {
  string network = 1;
  string address = 2;
}

message Middleware {
  message List { repeated Middleware list = 1; }

  enum Version {
    // PRE signals applying the middleware before the final handler.
    V1 = 0;
    // POST signals executing the middleware after the last handler.
    V2 = 1;
  }

  oneof match {
    Wasm wasm = 1;
    StripPathPrefix strip_path_prefix = 2;
  }

  message Wasm {
    message Setting {
      message Env {
        string key = 1;
        string value = 2;
      }
      message DirectoryMap {
        string alias = 1;
        string directory = 2;
      }
      string program_name = 1;
      repeated string arguments = 2;
      repeated Env environments = 3;
      repeated string preopen_directories = 4;
      repeated DirectoryMap map_directories = 5;
      bool inherit_stdin = 6;
      bool capture_stdout = 7;
      bool inherit_stdout = 8;
      bool capture_stderr = 9;
      bool inherit_stderr = 10;
    }

    message Config {
      // The options used to create wasm instance of the module.
      Setting instance = 1;

      // Plugin specific settings that the wasm module will load and use to
      // configer itself.
      google.protobuf.Struct plugin = 2;
    }
    // The name of this middleware. This is optiona, but when set it will be
    // used in logs and tracing.
    string name = 1;

    // The name of wasm module to load this is required. If this is let to empty
    // then this middleware will never be registered.
    //
    // This will be eagely lloaded meaning the module doesn't need to be
    // necessarily precompiled before the route is being registed.
    string module = 2;

    // Options for creating the wasm module instance.
    Config config = 3;
    Version version = 4;
  }
  message StripPathPrefix { string prefix = 1; }
}
// Protocol exposes
enum Protocol {
  TCP = 0;
  UDP = 1;
  HTTP = 2;
  WEBSOCKET = 3;
  QUIC = 4;
}

message Bind {
  oneof to {
    int32 port = 1;
    string hostPort = 2;
  }
}

message Route {
  enum LoadBalanceAlgo {
    RoundRobinWeighted = 0;
    RandomWeighted = 1;
    SmoothWeighted = 2;
  }
  Bind bind = 1;
  RequestMatch condition = 2;
  map<string, string> metrics_labels = 3;
  Retries retries = 4;
  google.protobuf.Duration timeout = 5;
  google.protobuf.Duration keepAlive = 6;
  repeated WeightedAddr load_balance = 8;
  LoadBalanceAlgo load_balance_algo = 9;
  bool allow_acme = 10;
  bool enable_optimized_copy = 11;
  Speed speed = 12;
  string name = 13;
  Rule rule = 14;
  int32 priority = 15;
  Middleware.List middlewares = 16;
  Protocol protocol = 17;
  bool is_health_endpoint = 18;
  string service = 19;
  repeated string host_names = 20;
}

// Speed defines rate limiting of how fast data willl be copied. This is a
// described in bytes units
// "B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"
//
// I you want do have upload speed of up to 40 mp per seconds then you can set
// downstream="20MiB/s"
message Speed {
  // The rate at which bytes are written to downstream connection. By downstream
  // connection we are refering to a connection established on tt server by the
  // world
  //   World => tt => Internal
  //   World [==> downstream connection] tt => Internal
  string downstream = 1;
  // The rate at which bytes are written to upstream connection. By upstream
  // connection we are refering to a connection established by tt server to the
  // configured internal service.
  //   World => tt => Internal
  //   World => tt [=> upstream connection] Internal
  string upstream = 2;
}

message Retries {
  bool enabled = 1;
  RetryBudget budget = 2;
}

message RetryBudget {
  // The ratio of additional traffic that may be added by retries.  A
  // retry_ratio of 0.1 means that 1 retry may be attempted for every 10 regular
  // requests.  A retry_ratio of 1.0 means that 1 retry may be attempted for
  // every 1 regular request (in other words, total request load may be doubled
  // as a result of retries).
  float retry_ratio = 1;
  // The proxy may always attempt this number of retries per second, even if it
  // would violate the retry_ratio.  This is to allow retries to happen even
  // when the request rate is very low.
  uint32 min_retries_per_second = 2;
  // This duration indicates for how long requests should be considered for the
  // purposes of enforcing the retry_ratio.  A higher value considers a larger
  // window and therefore allows burstier retries.
  google.protobuf.Duration ttl = 3;
}

message RequestMatch {
  oneof match {
    string sni = 1;
    string host = 2;
    string path = 3;
    google.protobuf.Empty fixed = 4;
  }
}

message Context {
  message Stat {
    int64 bytesRead = 1;
    int64 bytesWritten = 2;
  }
  message Conn {
    string localAddress = 1;
    string remoteAddress = 2;
    Stat stat = 3;
  }
  message Info {
    google.protobuf.StringValue sni = 1;
    repeated string host_names = 2;
    google.protobuf.StringValue path = 3;
    string routeName = 4;
    int32 listenPort = 5;
  }
  int64 id = 1;
  Protocol protocol = 2;
  Conn downstream = 3;
  Conn upstream = 4;
  Info info = 5;
}

message Rule {
  message List { repeated Rule rules = 1; }

  oneof match {
    List all = 1;
    List any = 2;
    Rule not = 3;

    TCP tcp = 4;
    HTTP http = 5;
  }

  message TCP {
    oneof match {
      uint32 port = 1;
      PortRange ports = 2;
      string sni = 3;
    }

    message PortRange {
      uint32 min = 1;
      uint32 max = 2;
    }
  }

  message HTTP {
    enum Method {
      GET = 0;
      POST = 1;
      PUT = 2;
      DELETE = 3;
      PATCH = 4;
      OPTIONS = 5;
      CONNECT = 6;
      HEAD = 7;
      TRACE = 8;
    }
    message MethodList { repeated Method list = 1; }
    message KeyValue {
      enum Type {
        Exact = 0;
        RegularExpression = 1;
      }
      Type type = 1;
      string name = 2;
      string value = 3;
    }
    message KeyValueList { repeated KeyValue list = 1; }

    message Path {
      enum Type {
        Exact = 0;
        Prefix = 1;
        RegularExpression = 2;
      }
      Type type = 1;
      string value = 2;
    }
    oneof match {
      MethodList methods = 1;
      Path path = 2;
      KeyValueList headers = 3;
      KeyValueList query_param = 4;
    }
  }
}

// AccessEntry records metrics about a http request.
message AccessEntry {
  // UserAgent details about the user agent sending the http request.
  message UserAgent {
    string name = 1;
    string version = 2;
    string os = 3;
    string os_version = 4;
    string device = 5;
    bool mobile = 6;
    bool tablet = 7;
    bool desktop = 8;
    bool bot = 9;
  }

  message Request {
    UserAgent user_agent = 1;
    string method = 2;
    int32 size = 3;
    string path = 4;
  }

  message ReverseProxy {
    // Number of bytes sent to the downstream service.
    int64 bytes_sent = 1;
    int64 bytes_received = 2;
    string target = 3;
  }

  message Response {
    // Total size in bytes of the response.
    int64 size = 1;
    int32 status_code = 2;
    google.protobuf.Duration time_to_write_header = 3;
  }

  message Info {
    // The name of the registered route.Do not confuse this with http route.
    // This
    // is configured route on tt
    string route = 1;
    // The service ID. A service is a collection of routes.
    string service = 2;
    repeated string virtual_hosts = 4;
  }
  Request request = 1;
  Response response = 2;
  ReverseProxy reverse_proxy = 3;
  Info info = 4;

  google.protobuf.Duration duration = 5;
}
