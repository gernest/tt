// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.5.1
// source: tcp.proto

package api

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Protocol exposes
type Protocol int32

const (
	Protocol_TCP       Protocol = 0
	Protocol_UDP       Protocol = 1
	Protocol_HTTP      Protocol = 2
	Protocol_WEBSOCKET Protocol = 3
	Protocol_QUIC      Protocol = 4
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
		2: "HTTP",
		3: "WEBSOCKET",
		4: "QUIC",
	}
	Protocol_value = map[string]int32{
		"TCP":       0,
		"UDP":       1,
		"HTTP":      2,
		"WEBSOCKET": 3,
		"QUIC":      4,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[0].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[0]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{0}
}

type JoinRequest_Suffrage int32

const (
	JoinRequest_VOTER     JoinRequest_Suffrage = 0
	JoinRequest_NOT_VOTER JoinRequest_Suffrage = 1
)

// Enum value maps for JoinRequest_Suffrage.
var (
	JoinRequest_Suffrage_name = map[int32]string{
		0: "VOTER",
		1: "NOT_VOTER",
	}
	JoinRequest_Suffrage_value = map[string]int32{
		"VOTER":     0,
		"NOT_VOTER": 1,
	}
)

func (x JoinRequest_Suffrage) Enum() *JoinRequest_Suffrage {
	p := new(JoinRequest_Suffrage)
	*p = x
	return p
}

func (x JoinRequest_Suffrage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinRequest_Suffrage) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[1].Descriptor()
}

func (JoinRequest_Suffrage) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[1]
}

func (x JoinRequest_Suffrage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinRequest_Suffrage.Descriptor instead.
func (JoinRequest_Suffrage) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{2, 0}
}

type Raft_KeyValue_Action int32

const (
	Raft_KeyValue_GET    Raft_KeyValue_Action = 0
	Raft_KeyValue_SET    Raft_KeyValue_Action = 1
	Raft_KeyValue_PUT    Raft_KeyValue_Action = 2
	Raft_KeyValue_POST   Raft_KeyValue_Action = 3
	Raft_KeyValue_DELETE Raft_KeyValue_Action = 4
)

// Enum value maps for Raft_KeyValue_Action.
var (
	Raft_KeyValue_Action_name = map[int32]string{
		0: "GET",
		1: "SET",
		2: "PUT",
		3: "POST",
		4: "DELETE",
	}
	Raft_KeyValue_Action_value = map[string]int32{
		"GET":    0,
		"SET":    1,
		"PUT":    2,
		"POST":   3,
		"DELETE": 4,
	}
)

func (x Raft_KeyValue_Action) Enum() *Raft_KeyValue_Action {
	p := new(Raft_KeyValue_Action)
	*p = x
	return p
}

func (x Raft_KeyValue_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Raft_KeyValue_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[2].Descriptor()
}

func (Raft_KeyValue_Action) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[2]
}

func (x Raft_KeyValue_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Raft_KeyValue_Action.Descriptor instead.
func (Raft_KeyValue_Action) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{4, 0, 0}
}

type Middleware_Version int32

const (
	// PRE signals applying the middleware before the final handler.
	Middleware_V1 Middleware_Version = 0
	// POST signals executing the middleware after the last handler.
	Middleware_V2 Middleware_Version = 1
)

// Enum value maps for Middleware_Version.
var (
	Middleware_Version_name = map[int32]string{
		0: "V1",
		1: "V2",
	}
	Middleware_Version_value = map[string]int32{
		"V1": 0,
		"V2": 1,
	}
)

func (x Middleware_Version) Enum() *Middleware_Version {
	p := new(Middleware_Version)
	*p = x
	return p
}

func (x Middleware_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Middleware_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[3].Descriptor()
}

func (Middleware_Version) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[3]
}

func (x Middleware_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Middleware_Version.Descriptor instead.
func (Middleware_Version) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10, 0}
}

type Route_LoadBalanceAlgo int32

const (
	Route_RoundRobinWeighted Route_LoadBalanceAlgo = 0
	Route_RandomWeighted     Route_LoadBalanceAlgo = 1
	Route_SmoothWeighted     Route_LoadBalanceAlgo = 2
)

// Enum value maps for Route_LoadBalanceAlgo.
var (
	Route_LoadBalanceAlgo_name = map[int32]string{
		0: "RoundRobinWeighted",
		1: "RandomWeighted",
		2: "SmoothWeighted",
	}
	Route_LoadBalanceAlgo_value = map[string]int32{
		"RoundRobinWeighted": 0,
		"RandomWeighted":     1,
		"SmoothWeighted":     2,
	}
)

func (x Route_LoadBalanceAlgo) Enum() *Route_LoadBalanceAlgo {
	p := new(Route_LoadBalanceAlgo)
	*p = x
	return p
}

func (x Route_LoadBalanceAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Route_LoadBalanceAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[4].Descriptor()
}

func (Route_LoadBalanceAlgo) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[4]
}

func (x Route_LoadBalanceAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Route_LoadBalanceAlgo.Descriptor instead.
func (Route_LoadBalanceAlgo) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{12, 0}
}

type Rule_HTTP_Method int32

const (
	Rule_HTTP_GET     Rule_HTTP_Method = 0
	Rule_HTTP_POST    Rule_HTTP_Method = 1
	Rule_HTTP_PUT     Rule_HTTP_Method = 2
	Rule_HTTP_DELETE  Rule_HTTP_Method = 3
	Rule_HTTP_PATCH   Rule_HTTP_Method = 4
	Rule_HTTP_OPTIONS Rule_HTTP_Method = 5
	Rule_HTTP_CONNECT Rule_HTTP_Method = 6
	Rule_HTTP_HEAD    Rule_HTTP_Method = 7
	Rule_HTTP_TRACE   Rule_HTTP_Method = 8
)

// Enum value maps for Rule_HTTP_Method.
var (
	Rule_HTTP_Method_name = map[int32]string{
		0: "GET",
		1: "POST",
		2: "PUT",
		3: "DELETE",
		4: "PATCH",
		5: "OPTIONS",
		6: "CONNECT",
		7: "HEAD",
		8: "TRACE",
	}
	Rule_HTTP_Method_value = map[string]int32{
		"GET":     0,
		"POST":    1,
		"PUT":     2,
		"DELETE":  3,
		"PATCH":   4,
		"OPTIONS": 5,
		"CONNECT": 6,
		"HEAD":    7,
		"TRACE":   8,
	}
)

func (x Rule_HTTP_Method) Enum() *Rule_HTTP_Method {
	p := new(Rule_HTTP_Method)
	*p = x
	return p
}

func (x Rule_HTTP_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_HTTP_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[5].Descriptor()
}

func (Rule_HTTP_Method) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[5]
}

func (x Rule_HTTP_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_HTTP_Method.Descriptor instead.
func (Rule_HTTP_Method) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 2, 0}
}

type Rule_HTTP_KeyValue_Type int32

const (
	Rule_HTTP_KeyValue_Exact             Rule_HTTP_KeyValue_Type = 0
	Rule_HTTP_KeyValue_RegularExpression Rule_HTTP_KeyValue_Type = 1
)

// Enum value maps for Rule_HTTP_KeyValue_Type.
var (
	Rule_HTTP_KeyValue_Type_name = map[int32]string{
		0: "Exact",
		1: "RegularExpression",
	}
	Rule_HTTP_KeyValue_Type_value = map[string]int32{
		"Exact":             0,
		"RegularExpression": 1,
	}
)

func (x Rule_HTTP_KeyValue_Type) Enum() *Rule_HTTP_KeyValue_Type {
	p := new(Rule_HTTP_KeyValue_Type)
	*p = x
	return p
}

func (x Rule_HTTP_KeyValue_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_HTTP_KeyValue_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[6].Descriptor()
}

func (Rule_HTTP_KeyValue_Type) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[6]
}

func (x Rule_HTTP_KeyValue_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_HTTP_KeyValue_Type.Descriptor instead.
func (Rule_HTTP_KeyValue_Type) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 2, 1, 0}
}

type Rule_HTTP_Path_Type int32

const (
	Rule_HTTP_Path_Exact             Rule_HTTP_Path_Type = 0
	Rule_HTTP_Path_Prefix            Rule_HTTP_Path_Type = 1
	Rule_HTTP_Path_RegularExpression Rule_HTTP_Path_Type = 2
)

// Enum value maps for Rule_HTTP_Path_Type.
var (
	Rule_HTTP_Path_Type_name = map[int32]string{
		0: "Exact",
		1: "Prefix",
		2: "RegularExpression",
	}
	Rule_HTTP_Path_Type_value = map[string]int32{
		"Exact":             0,
		"Prefix":            1,
		"RegularExpression": 2,
	}
)

func (x Rule_HTTP_Path_Type) Enum() *Rule_HTTP_Path_Type {
	p := new(Rule_HTTP_Path_Type)
	*p = x
	return p
}

func (x Rule_HTTP_Path_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_HTTP_Path_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[7].Descriptor()
}

func (Rule_HTTP_Path_Type) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[7]
}

func (x Rule_HTTP_Path_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_HTTP_Path_Type.Descriptor instead.
func (Rule_HTTP_Path_Type) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 2, 3, 0}
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{0}
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []string `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteRequest) GetRoutes() []string {
	if x != nil {
		return x.Routes
	}
	return nil
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   string               `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Address  string               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Suffrage JoinRequest_Suffrage `protobuf:"varint,3,opt,name=suffrage,proto3,enum=JoinRequest_Suffrage" json:"suffrage,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{2}
}

func (x *JoinRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *JoinRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *JoinRequest) GetSuffrage() JoinRequest_Suffrage {
	if x != nil {
		return x.Suffrage
	}
	return JoinRequest_VOTER
}

type JoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{3}
}

type Raft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Raft) Reset() {
	*x = Raft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft) ProtoMessage() {}

func (x *Raft) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft.ProtoReflect.Descriptor instead.
func (*Raft) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{4}
}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{5}
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*Response_Ok
	//	*Response_Error
	Result isResponse_Result `protobuf_oneof:"result"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{6}
}

func (m *Response) GetResult() isResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Response) GetOk() bool {
	if x, ok := x.GetResult().(*Response_Ok); ok {
		return x.Ok
	}
	return false
}

func (x *Response) GetError() string {
	if x, ok := x.GetResult().(*Response_Error); ok {
		return x.Error
	}
	return ""
}

type isResponse_Result interface {
	isResponse_Result()
}

type Response_Ok struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3,oneof"`
}

type Response_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*Response_Ok) isResponse_Result() {}

func (*Response_Error) isResponse_Result() {}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{7}
}

func (x *Config) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Config) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type WeightedAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr         *Address          `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Weight       int32             `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	MetricLabels map[string]string `protobuf:"bytes,4,rep,name=metric_labels,json=metricLabels,proto3" json:"metric_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WeightedAddr) Reset() {
	*x = WeightedAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedAddr) ProtoMessage() {}

func (x *WeightedAddr) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedAddr.ProtoReflect.Descriptor instead.
func (*WeightedAddr) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{8}
}

func (x *WeightedAddr) GetAddr() *Address {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *WeightedAddr) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WeightedAddr) GetMetricLabels() map[string]string {
	if x != nil {
		return x.MetricLabels
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{9}
}

func (x *Address) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Middleware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*Middleware_Wasm_
	//	*Middleware_StripPathPrefix_
	Match isMiddleware_Match `protobuf_oneof:"match"`
}

func (x *Middleware) Reset() {
	*x = Middleware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Middleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware) ProtoMessage() {}

func (x *Middleware) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware.ProtoReflect.Descriptor instead.
func (*Middleware) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10}
}

func (m *Middleware) GetMatch() isMiddleware_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *Middleware) GetWasm() *Middleware_Wasm {
	if x, ok := x.GetMatch().(*Middleware_Wasm_); ok {
		return x.Wasm
	}
	return nil
}

func (x *Middleware) GetStripPathPrefix() *Middleware_StripPathPrefix {
	if x, ok := x.GetMatch().(*Middleware_StripPathPrefix_); ok {
		return x.StripPathPrefix
	}
	return nil
}

type isMiddleware_Match interface {
	isMiddleware_Match()
}

type Middleware_Wasm_ struct {
	Wasm *Middleware_Wasm `protobuf:"bytes,1,opt,name=wasm,proto3,oneof"`
}

type Middleware_StripPathPrefix_ struct {
	StripPathPrefix *Middleware_StripPathPrefix `protobuf:"bytes,2,opt,name=strip_path_prefix,json=stripPathPrefix,proto3,oneof"`
}

func (*Middleware_Wasm_) isMiddleware_Match() {}

func (*Middleware_StripPathPrefix_) isMiddleware_Match() {}

type Bind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to To:
	//	*Bind_Port
	//	*Bind_HostPort
	To isBind_To `protobuf_oneof:"to"`
}

func (x *Bind) Reset() {
	*x = Bind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bind) ProtoMessage() {}

func (x *Bind) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bind.ProtoReflect.Descriptor instead.
func (*Bind) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{11}
}

func (m *Bind) GetTo() isBind_To {
	if m != nil {
		return m.To
	}
	return nil
}

func (x *Bind) GetPort() int32 {
	if x, ok := x.GetTo().(*Bind_Port); ok {
		return x.Port
	}
	return 0
}

func (x *Bind) GetHostPort() string {
	if x, ok := x.GetTo().(*Bind_HostPort); ok {
		return x.HostPort
	}
	return ""
}

type isBind_To interface {
	isBind_To()
}

type Bind_Port struct {
	Port int32 `protobuf:"varint,1,opt,name=port,proto3,oneof"`
}

type Bind_HostPort struct {
	HostPort string `protobuf:"bytes,2,opt,name=hostPort,proto3,oneof"`
}

func (*Bind_Port) isBind_To() {}

func (*Bind_HostPort) isBind_To() {}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bind                *Bind                 `protobuf:"bytes,1,opt,name=bind,proto3" json:"bind,omitempty"`
	Condition           *RequestMatch         `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	MetricsLabels       map[string]string     `protobuf:"bytes,3,rep,name=metrics_labels,json=metricsLabels,proto3" json:"metrics_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Retries             *Retries              `protobuf:"bytes,4,opt,name=retries,proto3" json:"retries,omitempty"`
	Timeout             *duration.Duration    `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	KeepAlive           *duration.Duration    `protobuf:"bytes,6,opt,name=keepAlive,proto3" json:"keepAlive,omitempty"`
	LoadBalance         []*WeightedAddr       `protobuf:"bytes,8,rep,name=load_balance,json=loadBalance,proto3" json:"load_balance,omitempty"`
	LoadBalanceAlgo     Route_LoadBalanceAlgo `protobuf:"varint,9,opt,name=load_balance_algo,json=loadBalanceAlgo,proto3,enum=Route_LoadBalanceAlgo" json:"load_balance_algo,omitempty"`
	AllowAcme           bool                  `protobuf:"varint,10,opt,name=allow_acme,json=allowAcme,proto3" json:"allow_acme,omitempty"`
	EnableOptimizedCopy bool                  `protobuf:"varint,11,opt,name=enable_optimized_copy,json=enableOptimizedCopy,proto3" json:"enable_optimized_copy,omitempty"`
	Speed               *Speed                `protobuf:"bytes,12,opt,name=speed,proto3" json:"speed,omitempty"`
	Name                string                `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Rule                *Rule                 `protobuf:"bytes,14,opt,name=rule,proto3" json:"rule,omitempty"`
	Priority            int32                 `protobuf:"varint,15,opt,name=priority,proto3" json:"priority,omitempty"`
	Middlewares         *Middleware_List      `protobuf:"bytes,16,opt,name=middlewares,proto3" json:"middlewares,omitempty"`
	Protocol            Protocol              `protobuf:"varint,17,opt,name=protocol,proto3,enum=Protocol" json:"protocol,omitempty"`
	IsHealthEndpoint    bool                  `protobuf:"varint,18,opt,name=is_health_endpoint,json=isHealthEndpoint,proto3" json:"is_health_endpoint,omitempty"`
	Service             string                `protobuf:"bytes,19,opt,name=service,proto3" json:"service,omitempty"`
	HostNames           []string              `protobuf:"bytes,20,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{12}
}

func (x *Route) GetBind() *Bind {
	if x != nil {
		return x.Bind
	}
	return nil
}

func (x *Route) GetCondition() *RequestMatch {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Route) GetMetricsLabels() map[string]string {
	if x != nil {
		return x.MetricsLabels
	}
	return nil
}

func (x *Route) GetRetries() *Retries {
	if x != nil {
		return x.Retries
	}
	return nil
}

func (x *Route) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Route) GetKeepAlive() *duration.Duration {
	if x != nil {
		return x.KeepAlive
	}
	return nil
}

func (x *Route) GetLoadBalance() []*WeightedAddr {
	if x != nil {
		return x.LoadBalance
	}
	return nil
}

func (x *Route) GetLoadBalanceAlgo() Route_LoadBalanceAlgo {
	if x != nil {
		return x.LoadBalanceAlgo
	}
	return Route_RoundRobinWeighted
}

func (x *Route) GetAllowAcme() bool {
	if x != nil {
		return x.AllowAcme
	}
	return false
}

func (x *Route) GetEnableOptimizedCopy() bool {
	if x != nil {
		return x.EnableOptimizedCopy
	}
	return false
}

func (x *Route) GetSpeed() *Speed {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *Route) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Route) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Route) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Route) GetMiddlewares() *Middleware_List {
	if x != nil {
		return x.Middlewares
	}
	return nil
}

func (x *Route) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_TCP
}

func (x *Route) GetIsHealthEndpoint() bool {
	if x != nil {
		return x.IsHealthEndpoint
	}
	return false
}

func (x *Route) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Route) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

// Speed defines rate limiting of how fast data willl be copied. This is a
// described in bytes units
// "B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"
//
// I you want do have upload speed of up to 40 mp per seconds then you can set
// downstream="20MiB/s"
type Speed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rate at which bytes are written to downstream connection. By downstream
	// connection we are refering to a connection established on tt server by the
	// world
	//   World => tt => Internal
	//   World [==> downstream connection] tt => Internal
	Downstream string `protobuf:"bytes,1,opt,name=downstream,proto3" json:"downstream,omitempty"`
	// The rate at which bytes are written to upstream connection. By upstream
	// connection we are refering to a connection established by tt server to the
	// configured internal service.
	//   World => tt => Internal
	//   World => tt [=> upstream connection] Internal
	Upstream string `protobuf:"bytes,2,opt,name=upstream,proto3" json:"upstream,omitempty"`
}

func (x *Speed) Reset() {
	*x = Speed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speed) ProtoMessage() {}

func (x *Speed) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speed.ProtoReflect.Descriptor instead.
func (*Speed) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{13}
}

func (x *Speed) GetDownstream() string {
	if x != nil {
		return x.Downstream
	}
	return ""
}

func (x *Speed) GetUpstream() string {
	if x != nil {
		return x.Upstream
	}
	return ""
}

type Retries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool         `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Budget  *RetryBudget `protobuf:"bytes,2,opt,name=budget,proto3" json:"budget,omitempty"`
}

func (x *Retries) Reset() {
	*x = Retries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Retries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retries) ProtoMessage() {}

func (x *Retries) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retries.ProtoReflect.Descriptor instead.
func (*Retries) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14}
}

func (x *Retries) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Retries) GetBudget() *RetryBudget {
	if x != nil {
		return x.Budget
	}
	return nil
}

type RetryBudget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ratio of additional traffic that may be added by retries.  A
	// retry_ratio of 0.1 means that 1 retry may be attempted for every 10 regular
	// requests.  A retry_ratio of 1.0 means that 1 retry may be attempted for
	// every 1 regular request (in other words, total request load may be doubled
	// as a result of retries).
	RetryRatio float32 `protobuf:"fixed32,1,opt,name=retry_ratio,json=retryRatio,proto3" json:"retry_ratio,omitempty"`
	// The proxy may always attempt this number of retries per second, even if it
	// would violate the retry_ratio.  This is to allow retries to happen even
	// when the request rate is very low.
	MinRetriesPerSecond uint32 `protobuf:"varint,2,opt,name=min_retries_per_second,json=minRetriesPerSecond,proto3" json:"min_retries_per_second,omitempty"`
	// This duration indicates for how long requests should be considered for the
	// purposes of enforcing the retry_ratio.  A higher value considers a larger
	// window and therefore allows burstier retries.
	Ttl *duration.Duration `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *RetryBudget) Reset() {
	*x = RetryBudget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryBudget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryBudget) ProtoMessage() {}

func (x *RetryBudget) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryBudget.ProtoReflect.Descriptor instead.
func (*RetryBudget) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{15}
}

func (x *RetryBudget) GetRetryRatio() float32 {
	if x != nil {
		return x.RetryRatio
	}
	return 0
}

func (x *RetryBudget) GetMinRetriesPerSecond() uint32 {
	if x != nil {
		return x.MinRetriesPerSecond
	}
	return 0
}

func (x *RetryBudget) GetTtl() *duration.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type RequestMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*RequestMatch_Sni
	//	*RequestMatch_Host
	//	*RequestMatch_Path
	//	*RequestMatch_Fixed
	Match isRequestMatch_Match `protobuf_oneof:"match"`
}

func (x *RequestMatch) Reset() {
	*x = RequestMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMatch) ProtoMessage() {}

func (x *RequestMatch) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMatch.ProtoReflect.Descriptor instead.
func (*RequestMatch) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{16}
}

func (m *RequestMatch) GetMatch() isRequestMatch_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *RequestMatch) GetSni() string {
	if x, ok := x.GetMatch().(*RequestMatch_Sni); ok {
		return x.Sni
	}
	return ""
}

func (x *RequestMatch) GetHost() string {
	if x, ok := x.GetMatch().(*RequestMatch_Host); ok {
		return x.Host
	}
	return ""
}

func (x *RequestMatch) GetPath() string {
	if x, ok := x.GetMatch().(*RequestMatch_Path); ok {
		return x.Path
	}
	return ""
}

func (x *RequestMatch) GetFixed() *empty.Empty {
	if x, ok := x.GetMatch().(*RequestMatch_Fixed); ok {
		return x.Fixed
	}
	return nil
}

type isRequestMatch_Match interface {
	isRequestMatch_Match()
}

type RequestMatch_Sni struct {
	Sni string `protobuf:"bytes,1,opt,name=sni,proto3,oneof"`
}

type RequestMatch_Host struct {
	Host string `protobuf:"bytes,2,opt,name=host,proto3,oneof"`
}

type RequestMatch_Path struct {
	Path string `protobuf:"bytes,3,opt,name=path,proto3,oneof"`
}

type RequestMatch_Fixed struct {
	Fixed *empty.Empty `protobuf:"bytes,4,opt,name=fixed,proto3,oneof"`
}

func (*RequestMatch_Sni) isRequestMatch_Match() {}

func (*RequestMatch_Host) isRequestMatch_Match() {}

func (*RequestMatch_Path) isRequestMatch_Match() {}

func (*RequestMatch_Fixed) isRequestMatch_Match() {}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Protocol   Protocol      `protobuf:"varint,2,opt,name=protocol,proto3,enum=Protocol" json:"protocol,omitempty"`
	Downstream *Context_Conn `protobuf:"bytes,3,opt,name=downstream,proto3" json:"downstream,omitempty"`
	Upstream   *Context_Conn `protobuf:"bytes,4,opt,name=upstream,proto3" json:"upstream,omitempty"`
	Info       *Context_Info `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{17}
}

func (x *Context) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Context) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_TCP
}

func (x *Context) GetDownstream() *Context_Conn {
	if x != nil {
		return x.Downstream
	}
	return nil
}

func (x *Context) GetUpstream() *Context_Conn {
	if x != nil {
		return x.Upstream
	}
	return nil
}

func (x *Context) GetInfo() *Context_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*Rule_All
	//	*Rule_Any
	//	*Rule_Not
	//	*Rule_Tcp
	//	*Rule_Http
	Match isRule_Match `protobuf_oneof:"match"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18}
}

func (m *Rule) GetMatch() isRule_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *Rule) GetAll() *Rule_List {
	if x, ok := x.GetMatch().(*Rule_All); ok {
		return x.All
	}
	return nil
}

func (x *Rule) GetAny() *Rule_List {
	if x, ok := x.GetMatch().(*Rule_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Rule) GetNot() *Rule {
	if x, ok := x.GetMatch().(*Rule_Not); ok {
		return x.Not
	}
	return nil
}

func (x *Rule) GetTcp() *Rule_TCP {
	if x, ok := x.GetMatch().(*Rule_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *Rule) GetHttp() *Rule_HTTP {
	if x, ok := x.GetMatch().(*Rule_Http); ok {
		return x.Http
	}
	return nil
}

type isRule_Match interface {
	isRule_Match()
}

type Rule_All struct {
	All *Rule_List `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type Rule_Any struct {
	Any *Rule_List `protobuf:"bytes,2,opt,name=any,proto3,oneof"`
}

type Rule_Not struct {
	Not *Rule `protobuf:"bytes,3,opt,name=not,proto3,oneof"`
}

type Rule_Tcp struct {
	Tcp *Rule_TCP `protobuf:"bytes,4,opt,name=tcp,proto3,oneof"`
}

type Rule_Http struct {
	Http *Rule_HTTP `protobuf:"bytes,5,opt,name=http,proto3,oneof"`
}

func (*Rule_All) isRule_Match() {}

func (*Rule_Any) isRule_Match() {}

func (*Rule_Not) isRule_Match() {}

func (*Rule_Tcp) isRule_Match() {}

func (*Rule_Http) isRule_Match() {}

// AccessEntry records metrics about a http request.
type AccessEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request      *AccessEntry_Request      `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response     *AccessEntry_Response     `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	ReverseProxy *AccessEntry_ReverseProxy `protobuf:"bytes,3,opt,name=reverse_proxy,json=reverseProxy,proto3" json:"reverse_proxy,omitempty"`
	Info         *AccessEntry_Info         `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Duration     *duration.Duration        `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *AccessEntry) Reset() {
	*x = AccessEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEntry) ProtoMessage() {}

func (x *AccessEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEntry.ProtoReflect.Descriptor instead.
func (*AccessEntry) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{19}
}

func (x *AccessEntry) GetRequest() *AccessEntry_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AccessEntry) GetResponse() *AccessEntry_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AccessEntry) GetReverseProxy() *AccessEntry_ReverseProxy {
	if x != nil {
		return x.ReverseProxy
	}
	return nil
}

func (x *AccessEntry) GetInfo() *AccessEntry_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *AccessEntry) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type Raft_KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action  Raft_KeyValue_Action   `protobuf:"varint,1,opt,name=action,proto3,enum=Raft_KeyValue_Action" json:"action,omitempty"`
	Context *Raft_KeyValue_Context `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *Raft_KeyValue) Reset() {
	*x = Raft_KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_KeyValue) ProtoMessage() {}

func (x *Raft_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_KeyValue.ProtoReflect.Descriptor instead.
func (*Raft_KeyValue) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Raft_KeyValue) GetAction() Raft_KeyValue_Action {
	if x != nil {
		return x.Action
	}
	return Raft_KeyValue_GET
}

func (x *Raft_KeyValue) GetContext() *Raft_KeyValue_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type Raft_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*Raft_Log_KeyValue
	Entry isRaft_Log_Entry `protobuf_oneof:"entry"`
}

func (x *Raft_Log) Reset() {
	*x = Raft_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_Log) ProtoMessage() {}

func (x *Raft_Log) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_Log.ProtoReflect.Descriptor instead.
func (*Raft_Log) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{4, 1}
}

func (m *Raft_Log) GetEntry() isRaft_Log_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *Raft_Log) GetKeyValue() *Raft_KeyValue {
	if x, ok := x.GetEntry().(*Raft_Log_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

type isRaft_Log_Entry interface {
	isRaft_Log_Entry()
}

type Raft_Log_KeyValue struct {
	KeyValue *Raft_KeyValue `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3,oneof"`
}

func (*Raft_Log_KeyValue) isRaft_Log_Entry() {}

type Raft_KeyValue_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ExpiresAt uint64 `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *Raft_KeyValue_Context) Reset() {
	*x = Raft_KeyValue_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raft_KeyValue_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raft_KeyValue_Context) ProtoMessage() {}

func (x *Raft_KeyValue_Context) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raft_KeyValue_Context.ProtoReflect.Descriptor instead.
func (*Raft_KeyValue_Context) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *Raft_KeyValue_Context) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Raft_KeyValue_Context) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Raft_KeyValue_Context) GetExpiresAt() uint64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type Store_SetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ExpiresAt uint64 `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *Store_SetRequest) Reset() {
	*x = Store_SetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_SetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_SetRequest) ProtoMessage() {}

func (x *Store_SetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_SetRequest.ProtoReflect.Descriptor instead.
func (*Store_SetRequest) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Store_SetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Store_SetRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Store_SetRequest) GetExpiresAt() uint64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type Store_SetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Store_SetResponse) Reset() {
	*x = Store_SetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_SetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_SetResponse) ProtoMessage() {}

func (x *Store_SetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_SetResponse.ProtoReflect.Descriptor instead.
func (*Store_SetResponse) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{5, 1}
}

type Store_GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Store_GetRequest) Reset() {
	*x = Store_GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_GetRequest) ProtoMessage() {}

func (x *Store_GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_GetRequest.ProtoReflect.Descriptor instead.
func (*Store_GetRequest) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Store_GetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Store_GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ExpiresAt uint64 `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *Store_GetResponse) Reset() {
	*x = Store_GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_GetResponse) ProtoMessage() {}

func (x *Store_GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_GetResponse.ProtoReflect.Descriptor instead.
func (*Store_GetResponse) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{5, 3}
}

func (x *Store_GetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Store_GetResponse) GetExpiresAt() uint64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type Middleware_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Middleware `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Middleware_List) Reset() {
	*x = Middleware_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Middleware_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_List) ProtoMessage() {}

func (x *Middleware_List) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_List.ProtoReflect.Descriptor instead.
func (*Middleware_List) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Middleware_List) GetList() []*Middleware {
	if x != nil {
		return x.List
	}
	return nil
}

type Middleware_Wasm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this middleware. This is optiona, but when set it will be
	// used in logs and tracing.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of wasm module to load this is required. If this is let to empty
	// then this middleware will never be registered.
	//
	// This will be eagely lloaded meaning the module doesn't need to be
	// necessarily precompiled before the route is being registed.
	Module string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	// Options for creating the wasm module instance.
	Config  *Middleware_Wasm_Config `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Version Middleware_Version      `protobuf:"varint,4,opt,name=version,proto3,enum=Middleware_Version" json:"version,omitempty"`
}

func (x *Middleware_Wasm) Reset() {
	*x = Middleware_Wasm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Middleware_Wasm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_Wasm) ProtoMessage() {}

func (x *Middleware_Wasm) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_Wasm.ProtoReflect.Descriptor instead.
func (*Middleware_Wasm) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Middleware_Wasm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Middleware_Wasm) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *Middleware_Wasm) GetConfig() *Middleware_Wasm_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Middleware_Wasm) GetVersion() Middleware_Version {
	if x != nil {
		return x.Version
	}
	return Middleware_V1
}

type Middleware_StripPathPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *Middleware_StripPathPrefix) Reset() {
	*x = Middleware_StripPathPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Middleware_StripPathPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_StripPathPrefix) ProtoMessage() {}

func (x *Middleware_StripPathPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_StripPathPrefix.ProtoReflect.Descriptor instead.
func (*Middleware_StripPathPrefix) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10, 2}
}

func (x *Middleware_StripPathPrefix) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type Middleware_Wasm_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramName        string                                  `protobuf:"bytes,1,opt,name=program_name,json=programName,proto3" json:"program_name,omitempty"`
	Arguments          []string                                `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Environments       []*Middleware_Wasm_Setting_Env          `protobuf:"bytes,3,rep,name=environments,proto3" json:"environments,omitempty"`
	PreopenDirectories []string                                `protobuf:"bytes,4,rep,name=preopen_directories,json=preopenDirectories,proto3" json:"preopen_directories,omitempty"`
	MapDirectories     []*Middleware_Wasm_Setting_DirectoryMap `protobuf:"bytes,5,rep,name=map_directories,json=mapDirectories,proto3" json:"map_directories,omitempty"`
	InheritStdin       bool                                    `protobuf:"varint,6,opt,name=inherit_stdin,json=inheritStdin,proto3" json:"inherit_stdin,omitempty"`
	CaptureStdout      bool                                    `protobuf:"varint,7,opt,name=capture_stdout,json=captureStdout,proto3" json:"capture_stdout,omitempty"`
	InheritStdout      bool                                    `protobuf:"varint,8,opt,name=inherit_stdout,json=inheritStdout,proto3" json:"inherit_stdout,omitempty"`
	CaptureStderr      bool                                    `protobuf:"varint,9,opt,name=capture_stderr,json=captureStderr,proto3" json:"capture_stderr,omitempty"`
	InheritStderr      bool                                    `protobuf:"varint,10,opt,name=inherit_stderr,json=inheritStderr,proto3" json:"inherit_stderr,omitempty"`
}

func (x *Middleware_Wasm_Setting) Reset() {
	*x = Middleware_Wasm_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Middleware_Wasm_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_Wasm_Setting) ProtoMessage() {}

func (x *Middleware_Wasm_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_Wasm_Setting.ProtoReflect.Descriptor instead.
func (*Middleware_Wasm_Setting) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10, 1, 0}
}

func (x *Middleware_Wasm_Setting) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *Middleware_Wasm_Setting) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Middleware_Wasm_Setting) GetEnvironments() []*Middleware_Wasm_Setting_Env {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *Middleware_Wasm_Setting) GetPreopenDirectories() []string {
	if x != nil {
		return x.PreopenDirectories
	}
	return nil
}

func (x *Middleware_Wasm_Setting) GetMapDirectories() []*Middleware_Wasm_Setting_DirectoryMap {
	if x != nil {
		return x.MapDirectories
	}
	return nil
}

func (x *Middleware_Wasm_Setting) GetInheritStdin() bool {
	if x != nil {
		return x.InheritStdin
	}
	return false
}

func (x *Middleware_Wasm_Setting) GetCaptureStdout() bool {
	if x != nil {
		return x.CaptureStdout
	}
	return false
}

func (x *Middleware_Wasm_Setting) GetInheritStdout() bool {
	if x != nil {
		return x.InheritStdout
	}
	return false
}

func (x *Middleware_Wasm_Setting) GetCaptureStderr() bool {
	if x != nil {
		return x.CaptureStderr
	}
	return false
}

func (x *Middleware_Wasm_Setting) GetInheritStderr() bool {
	if x != nil {
		return x.InheritStderr
	}
	return false
}

type Middleware_Wasm_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The options used to create wasm instance of the module.
	Instance *Middleware_Wasm_Setting `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Plugin specific settings that the wasm module will load and use to
	// configer itself.
	Plugin *_struct.Struct `protobuf:"bytes,2,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *Middleware_Wasm_Config) Reset() {
	*x = Middleware_Wasm_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Middleware_Wasm_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_Wasm_Config) ProtoMessage() {}

func (x *Middleware_Wasm_Config) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_Wasm_Config.ProtoReflect.Descriptor instead.
func (*Middleware_Wasm_Config) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10, 1, 1}
}

func (x *Middleware_Wasm_Config) GetInstance() *Middleware_Wasm_Setting {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *Middleware_Wasm_Config) GetPlugin() *_struct.Struct {
	if x != nil {
		return x.Plugin
	}
	return nil
}

type Middleware_Wasm_Setting_Env struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Middleware_Wasm_Setting_Env) Reset() {
	*x = Middleware_Wasm_Setting_Env{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Middleware_Wasm_Setting_Env) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_Wasm_Setting_Env) ProtoMessage() {}

func (x *Middleware_Wasm_Setting_Env) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_Wasm_Setting_Env.ProtoReflect.Descriptor instead.
func (*Middleware_Wasm_Setting_Env) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10, 1, 0, 0}
}

func (x *Middleware_Wasm_Setting_Env) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Middleware_Wasm_Setting_Env) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Middleware_Wasm_Setting_DirectoryMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias     string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	Directory string `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *Middleware_Wasm_Setting_DirectoryMap) Reset() {
	*x = Middleware_Wasm_Setting_DirectoryMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Middleware_Wasm_Setting_DirectoryMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware_Wasm_Setting_DirectoryMap) ProtoMessage() {}

func (x *Middleware_Wasm_Setting_DirectoryMap) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware_Wasm_Setting_DirectoryMap.ProtoReflect.Descriptor instead.
func (*Middleware_Wasm_Setting_DirectoryMap) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10, 1, 0, 1}
}

func (x *Middleware_Wasm_Setting_DirectoryMap) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Middleware_Wasm_Setting_DirectoryMap) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type Context_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesRead    int64 `protobuf:"varint,1,opt,name=bytesRead,proto3" json:"bytesRead,omitempty"`
	BytesWritten int64 `protobuf:"varint,2,opt,name=bytesWritten,proto3" json:"bytesWritten,omitempty"`
}

func (x *Context_Stat) Reset() {
	*x = Context_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context_Stat) ProtoMessage() {}

func (x *Context_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context_Stat.ProtoReflect.Descriptor instead.
func (*Context_Stat) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Context_Stat) GetBytesRead() int64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *Context_Stat) GetBytesWritten() int64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

type Context_Conn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAddress  string        `protobuf:"bytes,1,opt,name=localAddress,proto3" json:"localAddress,omitempty"`
	RemoteAddress string        `protobuf:"bytes,2,opt,name=remoteAddress,proto3" json:"remoteAddress,omitempty"`
	Stat          *Context_Stat `protobuf:"bytes,3,opt,name=stat,proto3" json:"stat,omitempty"`
}

func (x *Context_Conn) Reset() {
	*x = Context_Conn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context_Conn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context_Conn) ProtoMessage() {}

func (x *Context_Conn) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context_Conn.ProtoReflect.Descriptor instead.
func (*Context_Conn) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Context_Conn) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

func (x *Context_Conn) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *Context_Conn) GetStat() *Context_Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

type Context_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sni        *wrappers.StringValue `protobuf:"bytes,1,opt,name=sni,proto3" json:"sni,omitempty"`
	HostNames  []string              `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	Path       *wrappers.StringValue `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	RouteName  string                `protobuf:"bytes,4,opt,name=routeName,proto3" json:"routeName,omitempty"`
	ListenPort int32                 `protobuf:"varint,5,opt,name=listenPort,proto3" json:"listenPort,omitempty"`
}

func (x *Context_Info) Reset() {
	*x = Context_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context_Info) ProtoMessage() {}

func (x *Context_Info) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context_Info.ProtoReflect.Descriptor instead.
func (*Context_Info) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{17, 2}
}

func (x *Context_Info) GetSni() *wrappers.StringValue {
	if x != nil {
		return x.Sni
	}
	return nil
}

func (x *Context_Info) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

func (x *Context_Info) GetPath() *wrappers.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Context_Info) GetRouteName() string {
	if x != nil {
		return x.RouteName
	}
	return ""
}

func (x *Context_Info) GetListenPort() int32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

type Rule_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Rule_List) Reset() {
	*x = Rule_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_List) ProtoMessage() {}

func (x *Rule_List) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_List.ProtoReflect.Descriptor instead.
func (*Rule_List) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Rule_List) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Rule_TCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*Rule_TCP_Port
	//	*Rule_TCP_Ports
	//	*Rule_TCP_Sni
	Match isRule_TCP_Match `protobuf_oneof:"match"`
}

func (x *Rule_TCP) Reset() {
	*x = Rule_TCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_TCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_TCP) ProtoMessage() {}

func (x *Rule_TCP) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_TCP.ProtoReflect.Descriptor instead.
func (*Rule_TCP) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 1}
}

func (m *Rule_TCP) GetMatch() isRule_TCP_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *Rule_TCP) GetPort() uint32 {
	if x, ok := x.GetMatch().(*Rule_TCP_Port); ok {
		return x.Port
	}
	return 0
}

func (x *Rule_TCP) GetPorts() *Rule_TCP_PortRange {
	if x, ok := x.GetMatch().(*Rule_TCP_Ports); ok {
		return x.Ports
	}
	return nil
}

func (x *Rule_TCP) GetSni() string {
	if x, ok := x.GetMatch().(*Rule_TCP_Sni); ok {
		return x.Sni
	}
	return ""
}

type isRule_TCP_Match interface {
	isRule_TCP_Match()
}

type Rule_TCP_Port struct {
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3,oneof"`
}

type Rule_TCP_Ports struct {
	Ports *Rule_TCP_PortRange `protobuf:"bytes,2,opt,name=ports,proto3,oneof"`
}

type Rule_TCP_Sni struct {
	Sni string `protobuf:"bytes,3,opt,name=sni,proto3,oneof"`
}

func (*Rule_TCP_Port) isRule_TCP_Match() {}

func (*Rule_TCP_Ports) isRule_TCP_Match() {}

func (*Rule_TCP_Sni) isRule_TCP_Match() {}

type Rule_HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*Rule_HTTP_Methods
	//	*Rule_HTTP_Path_
	//	*Rule_HTTP_Headers
	//	*Rule_HTTP_QueryParam
	Match isRule_HTTP_Match `protobuf_oneof:"match"`
}

func (x *Rule_HTTP) Reset() {
	*x = Rule_HTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_HTTP) ProtoMessage() {}

func (x *Rule_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_HTTP.ProtoReflect.Descriptor instead.
func (*Rule_HTTP) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 2}
}

func (m *Rule_HTTP) GetMatch() isRule_HTTP_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *Rule_HTTP) GetMethods() *Rule_HTTP_MethodList {
	if x, ok := x.GetMatch().(*Rule_HTTP_Methods); ok {
		return x.Methods
	}
	return nil
}

func (x *Rule_HTTP) GetPath() *Rule_HTTP_Path {
	if x, ok := x.GetMatch().(*Rule_HTTP_Path_); ok {
		return x.Path
	}
	return nil
}

func (x *Rule_HTTP) GetHeaders() *Rule_HTTP_KeyValueList {
	if x, ok := x.GetMatch().(*Rule_HTTP_Headers); ok {
		return x.Headers
	}
	return nil
}

func (x *Rule_HTTP) GetQueryParam() *Rule_HTTP_KeyValueList {
	if x, ok := x.GetMatch().(*Rule_HTTP_QueryParam); ok {
		return x.QueryParam
	}
	return nil
}

type isRule_HTTP_Match interface {
	isRule_HTTP_Match()
}

type Rule_HTTP_Methods struct {
	Methods *Rule_HTTP_MethodList `protobuf:"bytes,1,opt,name=methods,proto3,oneof"`
}

type Rule_HTTP_Path_ struct {
	Path *Rule_HTTP_Path `protobuf:"bytes,2,opt,name=path,proto3,oneof"`
}

type Rule_HTTP_Headers struct {
	Headers *Rule_HTTP_KeyValueList `protobuf:"bytes,3,opt,name=headers,proto3,oneof"`
}

type Rule_HTTP_QueryParam struct {
	QueryParam *Rule_HTTP_KeyValueList `protobuf:"bytes,4,opt,name=query_param,json=queryParam,proto3,oneof"`
}

func (*Rule_HTTP_Methods) isRule_HTTP_Match() {}

func (*Rule_HTTP_Path_) isRule_HTTP_Match() {}

func (*Rule_HTTP_Headers) isRule_HTTP_Match() {}

func (*Rule_HTTP_QueryParam) isRule_HTTP_Match() {}

type Rule_TCP_PortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Rule_TCP_PortRange) Reset() {
	*x = Rule_TCP_PortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_TCP_PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_TCP_PortRange) ProtoMessage() {}

func (x *Rule_TCP_PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_TCP_PortRange.ProtoReflect.Descriptor instead.
func (*Rule_TCP_PortRange) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 1, 0}
}

func (x *Rule_TCP_PortRange) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Rule_TCP_PortRange) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Rule_HTTP_MethodList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []Rule_HTTP_Method `protobuf:"varint,1,rep,packed,name=list,proto3,enum=Rule_HTTP_Method" json:"list,omitempty"`
}

func (x *Rule_HTTP_MethodList) Reset() {
	*x = Rule_HTTP_MethodList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_HTTP_MethodList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_HTTP_MethodList) ProtoMessage() {}

func (x *Rule_HTTP_MethodList) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_HTTP_MethodList.ProtoReflect.Descriptor instead.
func (*Rule_HTTP_MethodList) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 2, 0}
}

func (x *Rule_HTTP_MethodList) GetList() []Rule_HTTP_Method {
	if x != nil {
		return x.List
	}
	return nil
}

type Rule_HTTP_KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Rule_HTTP_KeyValue_Type `protobuf:"varint,1,opt,name=type,proto3,enum=Rule_HTTP_KeyValue_Type" json:"type,omitempty"`
	Name  string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value string                  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Rule_HTTP_KeyValue) Reset() {
	*x = Rule_HTTP_KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_HTTP_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_HTTP_KeyValue) ProtoMessage() {}

func (x *Rule_HTTP_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_HTTP_KeyValue.ProtoReflect.Descriptor instead.
func (*Rule_HTTP_KeyValue) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 2, 1}
}

func (x *Rule_HTTP_KeyValue) GetType() Rule_HTTP_KeyValue_Type {
	if x != nil {
		return x.Type
	}
	return Rule_HTTP_KeyValue_Exact
}

func (x *Rule_HTTP_KeyValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule_HTTP_KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Rule_HTTP_KeyValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Rule_HTTP_KeyValue `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Rule_HTTP_KeyValueList) Reset() {
	*x = Rule_HTTP_KeyValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_HTTP_KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_HTTP_KeyValueList) ProtoMessage() {}

func (x *Rule_HTTP_KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_HTTP_KeyValueList.ProtoReflect.Descriptor instead.
func (*Rule_HTTP_KeyValueList) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 2, 2}
}

func (x *Rule_HTTP_KeyValueList) GetList() []*Rule_HTTP_KeyValue {
	if x != nil {
		return x.List
	}
	return nil
}

type Rule_HTTP_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Rule_HTTP_Path_Type `protobuf:"varint,1,opt,name=type,proto3,enum=Rule_HTTP_Path_Type" json:"type,omitempty"`
	Value string              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Rule_HTTP_Path) Reset() {
	*x = Rule_HTTP_Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_HTTP_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_HTTP_Path) ProtoMessage() {}

func (x *Rule_HTTP_Path) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_HTTP_Path.ProtoReflect.Descriptor instead.
func (*Rule_HTTP_Path) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{18, 2, 3}
}

func (x *Rule_HTTP_Path) GetType() Rule_HTTP_Path_Type {
	if x != nil {
		return x.Type
	}
	return Rule_HTTP_Path_Exact
}

func (x *Rule_HTTP_Path) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// UserAgent details about the user agent sending the http request.
type AccessEntry_UserAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Os        string `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion string `protobuf:"bytes,4,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Device    string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	Mobile    bool   `protobuf:"varint,6,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Tablet    bool   `protobuf:"varint,7,opt,name=tablet,proto3" json:"tablet,omitempty"`
	Desktop   bool   `protobuf:"varint,8,opt,name=desktop,proto3" json:"desktop,omitempty"`
	Bot       bool   `protobuf:"varint,9,opt,name=bot,proto3" json:"bot,omitempty"`
}

func (x *AccessEntry_UserAgent) Reset() {
	*x = AccessEntry_UserAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessEntry_UserAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEntry_UserAgent) ProtoMessage() {}

func (x *AccessEntry_UserAgent) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEntry_UserAgent.ProtoReflect.Descriptor instead.
func (*AccessEntry_UserAgent) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{19, 0}
}

func (x *AccessEntry_UserAgent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessEntry_UserAgent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AccessEntry_UserAgent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AccessEntry_UserAgent) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *AccessEntry_UserAgent) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *AccessEntry_UserAgent) GetMobile() bool {
	if x != nil {
		return x.Mobile
	}
	return false
}

func (x *AccessEntry_UserAgent) GetTablet() bool {
	if x != nil {
		return x.Tablet
	}
	return false
}

func (x *AccessEntry_UserAgent) GetDesktop() bool {
	if x != nil {
		return x.Desktop
	}
	return false
}

func (x *AccessEntry_UserAgent) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

type AccessEntry_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgent *AccessEntry_UserAgent `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Method    string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Size      int32                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Path      string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *AccessEntry_Request) Reset() {
	*x = AccessEntry_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessEntry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEntry_Request) ProtoMessage() {}

func (x *AccessEntry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEntry_Request.ProtoReflect.Descriptor instead.
func (*AccessEntry_Request) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{19, 1}
}

func (x *AccessEntry_Request) GetUserAgent() *AccessEntry_UserAgent {
	if x != nil {
		return x.UserAgent
	}
	return nil
}

func (x *AccessEntry_Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *AccessEntry_Request) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AccessEntry_Request) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AccessEntry_ReverseProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of bytes sent to the downstream service.
	BytesSent     int64  `protobuf:"varint,1,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesReceived int64  `protobuf:"varint,2,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	Target        string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *AccessEntry_ReverseProxy) Reset() {
	*x = AccessEntry_ReverseProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessEntry_ReverseProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEntry_ReverseProxy) ProtoMessage() {}

func (x *AccessEntry_ReverseProxy) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEntry_ReverseProxy.ProtoReflect.Descriptor instead.
func (*AccessEntry_ReverseProxy) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{19, 2}
}

func (x *AccessEntry_ReverseProxy) GetBytesSent() int64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *AccessEntry_ReverseProxy) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *AccessEntry_ReverseProxy) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type AccessEntry_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total size in bytes of the response.
	Size              int64              `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	StatusCode        int32              `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	TimeToWriteHeader *duration.Duration `protobuf:"bytes,3,opt,name=time_to_write_header,json=timeToWriteHeader,proto3" json:"time_to_write_header,omitempty"`
}

func (x *AccessEntry_Response) Reset() {
	*x = AccessEntry_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessEntry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEntry_Response) ProtoMessage() {}

func (x *AccessEntry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEntry_Response.ProtoReflect.Descriptor instead.
func (*AccessEntry_Response) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{19, 3}
}

func (x *AccessEntry_Response) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AccessEntry_Response) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *AccessEntry_Response) GetTimeToWriteHeader() *duration.Duration {
	if x != nil {
		return x.TimeToWriteHeader
	}
	return nil
}

type AccessEntry_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the registered route.Do not confuse this with http route.
	// This
	// is configured route on tt
	Route string `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// The service ID. A service is a collection of routes.
	Service      string   `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	VirtualHosts []string `protobuf:"bytes,4,rep,name=virtual_hosts,json=virtualHosts,proto3" json:"virtual_hosts,omitempty"`
}

func (x *AccessEntry_Info) Reset() {
	*x = AccessEntry_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessEntry_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEntry_Info) ProtoMessage() {}

func (x *AccessEntry_Info) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEntry_Info.ProtoReflect.Descriptor instead.
func (*AccessEntry_Info) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{19, 4}
}

func (x *AccessEntry_Info) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *AccessEntry_Info) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *AccessEntry_Info) GetVirtualHosts() []string {
	if x != nil {
		return x.VirtualHosts
	}
	return nil
}

var File_tcp_proto protoreflect.FileDescriptor

var file_tcp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x99, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x75, 0x66, 0x66, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x66, 0x66, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x73, 0x75,
	0x66, 0x66, 0x72, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x08, 0x53, 0x75, 0x66, 0x66, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x01, 0x22, 0x0e, 0x0a, 0x0c,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x02, 0x0a,
	0x04, 0x52, 0x61, 0x66, 0x74, 0x1a, 0xf8, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x50, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x39, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04,
	0x1a, 0x3d, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x2d, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22,
	0xcf, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x53, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x1a, 0x0d,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1e, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x42, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x22, 0x3e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x6b, 0x12,
	0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x38, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x0c,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc1, 0x08, 0x0a, 0x0a, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x77, 0x61, 0x73, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x73, 0x6d, 0x12,
	0x49, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x50, 0x61, 0x74,
	0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x27, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0xc7, 0x06, 0x0a, 0x04, 0x57, 0x61, 0x73, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xc1, 0x04, 0x0a, 0x07, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x57,
	0x61, 0x73, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f,
	0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x1a, 0x2d, 0x0a, 0x03, 0x45, 0x6e, 0x76,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x42, 0x0a, 0x0c, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x6f, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x57, 0x61, 0x73, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x1a, 0x29, 0x0a,
	0x0f, 0x53, 0x74, 0x72, 0x69, 0x70, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x19, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x31, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56,
	0x32, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x40, 0x0a, 0x04,
	0x42, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x04, 0x0a, 0x02, 0x74, 0x6f, 0x22, 0xac,
	0x07, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x62,
	0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x6b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x70, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x1c, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0f, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6d, 0x6f,
	0x6f, 0x74, 0x68, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x10, 0x02, 0x22, 0x43, 0x0a,
	0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x22, 0x49, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x22, 0x90, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x33,
	0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x22, 0x87, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x6e, 0x69, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xc4, 0x04, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2d, 0x0a,
	0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x08,
	0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x08, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x48, 0x0a, 0x04, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x1a, 0x73, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x1a, 0xc5, 0x01, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73,
	0x6e, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0xad, 0x08, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x61, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x03, 0x61, 0x6e,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x19, 0x0a, 0x03, 0x6e, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x43, 0x50, 0x48, 0x00, 0x52,
	0x03, 0x74, 0x63, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x1a, 0x23, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x96, 0x01, 0x0a, 0x03,
	0x54, 0x43, 0x50, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x54, 0x43, 0x50, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x6e, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6e, 0x69, 0x1a, 0x2f, 0x0a, 0x09, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x1a, 0xc1, 0x05, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x31, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x33, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x8c, 0x01,
	0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x78,
	0x61, 0x63, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x1a, 0x37, 0x0a, 0x0c,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x7c, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x78, 0x61, 0x63, 0x74, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x22, 0x6a, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45,
	0x41, 0x44, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x08, 0x42,
	0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x22, 0xc9, 0x07, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xdc, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x6f,
	0x74, 0x1a, 0x80, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x1a, 0x6c, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x1a, 0x8b, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x1a, 0x5b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x2a, 0x3f, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x54, 0x54, 0x50, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x51, 0x55, 0x49, 0x43, 0x10, 0x04, 0x32, 0xa8,
	0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x0e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x07, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12,
	0x07, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x07, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x64, 0x0a, 0x07, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x1b, 0x5a, 0x19, 0x67, 0x69, 0x72, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65,
	0x72, 0x6e, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tcp_proto_rawDescOnce sync.Once
	file_tcp_proto_rawDescData = file_tcp_proto_rawDesc
)

func file_tcp_proto_rawDescGZIP() []byte {
	file_tcp_proto_rawDescOnce.Do(func() {
		file_tcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_tcp_proto_rawDescData)
	})
	return file_tcp_proto_rawDescData
}

var file_tcp_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_tcp_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_tcp_proto_goTypes = []interface{}{
	(Protocol)(0),                                // 0: Protocol
	(JoinRequest_Suffrage)(0),                    // 1: JoinRequest.Suffrage
	(Raft_KeyValue_Action)(0),                    // 2: Raft.KeyValue.Action
	(Middleware_Version)(0),                      // 3: Middleware.Version
	(Route_LoadBalanceAlgo)(0),                   // 4: Route.LoadBalanceAlgo
	(Rule_HTTP_Method)(0),                        // 5: Rule.HTTP.Method
	(Rule_HTTP_KeyValue_Type)(0),                 // 6: Rule.HTTP.KeyValue.Type
	(Rule_HTTP_Path_Type)(0),                     // 7: Rule.HTTP.Path.Type
	(*ConfigRequest)(nil),                        // 8: ConfigRequest
	(*DeleteRequest)(nil),                        // 9: DeleteRequest
	(*JoinRequest)(nil),                          // 10: JoinRequest
	(*JoinResponse)(nil),                         // 11: JoinResponse
	(*Raft)(nil),                                 // 12: Raft
	(*Store)(nil),                                // 13: Store
	(*Response)(nil),                             // 14: Response
	(*Config)(nil),                               // 15: Config
	(*WeightedAddr)(nil),                         // 16: WeightedAddr
	(*Address)(nil),                              // 17: Address
	(*Middleware)(nil),                           // 18: Middleware
	(*Bind)(nil),                                 // 19: Bind
	(*Route)(nil),                                // 20: Route
	(*Speed)(nil),                                // 21: Speed
	(*Retries)(nil),                              // 22: Retries
	(*RetryBudget)(nil),                          // 23: RetryBudget
	(*RequestMatch)(nil),                         // 24: RequestMatch
	(*Context)(nil),                              // 25: Context
	(*Rule)(nil),                                 // 26: Rule
	(*AccessEntry)(nil),                          // 27: AccessEntry
	(*Raft_KeyValue)(nil),                        // 28: Raft.KeyValue
	(*Raft_Log)(nil),                             // 29: Raft.Log
	(*Raft_KeyValue_Context)(nil),                // 30: Raft.KeyValue.Context
	(*Store_SetRequest)(nil),                     // 31: Store.SetRequest
	(*Store_SetResponse)(nil),                    // 32: Store.SetResponse
	(*Store_GetRequest)(nil),                     // 33: Store.GetRequest
	(*Store_GetResponse)(nil),                    // 34: Store.GetResponse
	nil,                                          // 35: WeightedAddr.MetricLabelsEntry
	(*Middleware_List)(nil),                      // 36: Middleware.List
	(*Middleware_Wasm)(nil),                      // 37: Middleware.Wasm
	(*Middleware_StripPathPrefix)(nil),           // 38: Middleware.StripPathPrefix
	(*Middleware_Wasm_Setting)(nil),              // 39: Middleware.Wasm.Setting
	(*Middleware_Wasm_Config)(nil),               // 40: Middleware.Wasm.Config
	(*Middleware_Wasm_Setting_Env)(nil),          // 41: Middleware.Wasm.Setting.Env
	(*Middleware_Wasm_Setting_DirectoryMap)(nil), // 42: Middleware.Wasm.Setting.DirectoryMap
	nil,                              // 43: Route.MetricsLabelsEntry
	(*Context_Stat)(nil),             // 44: Context.Stat
	(*Context_Conn)(nil),             // 45: Context.Conn
	(*Context_Info)(nil),             // 46: Context.Info
	(*Rule_List)(nil),                // 47: Rule.List
	(*Rule_TCP)(nil),                 // 48: Rule.TCP
	(*Rule_HTTP)(nil),                // 49: Rule.HTTP
	(*Rule_TCP_PortRange)(nil),       // 50: Rule.TCP.PortRange
	(*Rule_HTTP_MethodList)(nil),     // 51: Rule.HTTP.MethodList
	(*Rule_HTTP_KeyValue)(nil),       // 52: Rule.HTTP.KeyValue
	(*Rule_HTTP_KeyValueList)(nil),   // 53: Rule.HTTP.KeyValueList
	(*Rule_HTTP_Path)(nil),           // 54: Rule.HTTP.Path
	(*AccessEntry_UserAgent)(nil),    // 55: AccessEntry.UserAgent
	(*AccessEntry_Request)(nil),      // 56: AccessEntry.Request
	(*AccessEntry_ReverseProxy)(nil), // 57: AccessEntry.ReverseProxy
	(*AccessEntry_Response)(nil),     // 58: AccessEntry.Response
	(*AccessEntry_Info)(nil),         // 59: AccessEntry.Info
	(*duration.Duration)(nil),        // 60: google.protobuf.Duration
	(*empty.Empty)(nil),              // 61: google.protobuf.Empty
	(*_struct.Struct)(nil),           // 62: google.protobuf.Struct
	(*wrappers.StringValue)(nil),     // 63: google.protobuf.StringValue
}
var file_tcp_proto_depIdxs = []int32{
	1,  // 0: JoinRequest.suffrage:type_name -> JoinRequest.Suffrage
	20, // 1: Config.routes:type_name -> Route
	17, // 2: WeightedAddr.addr:type_name -> Address
	35, // 3: WeightedAddr.metric_labels:type_name -> WeightedAddr.MetricLabelsEntry
	37, // 4: Middleware.wasm:type_name -> Middleware.Wasm
	38, // 5: Middleware.strip_path_prefix:type_name -> Middleware.StripPathPrefix
	19, // 6: Route.bind:type_name -> Bind
	24, // 7: Route.condition:type_name -> RequestMatch
	43, // 8: Route.metrics_labels:type_name -> Route.MetricsLabelsEntry
	22, // 9: Route.retries:type_name -> Retries
	60, // 10: Route.timeout:type_name -> google.protobuf.Duration
	60, // 11: Route.keepAlive:type_name -> google.protobuf.Duration
	16, // 12: Route.load_balance:type_name -> WeightedAddr
	4,  // 13: Route.load_balance_algo:type_name -> Route.LoadBalanceAlgo
	21, // 14: Route.speed:type_name -> Speed
	26, // 15: Route.rule:type_name -> Rule
	36, // 16: Route.middlewares:type_name -> Middleware.List
	0,  // 17: Route.protocol:type_name -> Protocol
	23, // 18: Retries.budget:type_name -> RetryBudget
	60, // 19: RetryBudget.ttl:type_name -> google.protobuf.Duration
	61, // 20: RequestMatch.fixed:type_name -> google.protobuf.Empty
	0,  // 21: Context.protocol:type_name -> Protocol
	45, // 22: Context.downstream:type_name -> Context.Conn
	45, // 23: Context.upstream:type_name -> Context.Conn
	46, // 24: Context.info:type_name -> Context.Info
	47, // 25: Rule.all:type_name -> Rule.List
	47, // 26: Rule.any:type_name -> Rule.List
	26, // 27: Rule.not:type_name -> Rule
	48, // 28: Rule.tcp:type_name -> Rule.TCP
	49, // 29: Rule.http:type_name -> Rule.HTTP
	56, // 30: AccessEntry.request:type_name -> AccessEntry.Request
	58, // 31: AccessEntry.response:type_name -> AccessEntry.Response
	57, // 32: AccessEntry.reverse_proxy:type_name -> AccessEntry.ReverseProxy
	59, // 33: AccessEntry.info:type_name -> AccessEntry.Info
	60, // 34: AccessEntry.duration:type_name -> google.protobuf.Duration
	2,  // 35: Raft.KeyValue.action:type_name -> Raft.KeyValue.Action
	30, // 36: Raft.KeyValue.context:type_name -> Raft.KeyValue.Context
	28, // 37: Raft.Log.key_value:type_name -> Raft.KeyValue
	18, // 38: Middleware.List.list:type_name -> Middleware
	40, // 39: Middleware.Wasm.config:type_name -> Middleware.Wasm.Config
	3,  // 40: Middleware.Wasm.version:type_name -> Middleware.Version
	41, // 41: Middleware.Wasm.Setting.environments:type_name -> Middleware.Wasm.Setting.Env
	42, // 42: Middleware.Wasm.Setting.map_directories:type_name -> Middleware.Wasm.Setting.DirectoryMap
	39, // 43: Middleware.Wasm.Config.instance:type_name -> Middleware.Wasm.Setting
	62, // 44: Middleware.Wasm.Config.plugin:type_name -> google.protobuf.Struct
	44, // 45: Context.Conn.stat:type_name -> Context.Stat
	63, // 46: Context.Info.sni:type_name -> google.protobuf.StringValue
	63, // 47: Context.Info.path:type_name -> google.protobuf.StringValue
	26, // 48: Rule.List.rules:type_name -> Rule
	50, // 49: Rule.TCP.ports:type_name -> Rule.TCP.PortRange
	51, // 50: Rule.HTTP.methods:type_name -> Rule.HTTP.MethodList
	54, // 51: Rule.HTTP.path:type_name -> Rule.HTTP.Path
	53, // 52: Rule.HTTP.headers:type_name -> Rule.HTTP.KeyValueList
	53, // 53: Rule.HTTP.query_param:type_name -> Rule.HTTP.KeyValueList
	5,  // 54: Rule.HTTP.MethodList.list:type_name -> Rule.HTTP.Method
	6,  // 55: Rule.HTTP.KeyValue.type:type_name -> Rule.HTTP.KeyValue.Type
	52, // 56: Rule.HTTP.KeyValueList.list:type_name -> Rule.HTTP.KeyValue
	7,  // 57: Rule.HTTP.Path.type:type_name -> Rule.HTTP.Path.Type
	55, // 58: AccessEntry.Request.user_agent:type_name -> AccessEntry.UserAgent
	60, // 59: AccessEntry.Response.time_to_write_header:type_name -> google.protobuf.Duration
	8,  // 60: Proxy.Get:input_type -> ConfigRequest
	15, // 61: Proxy.Put:input_type -> Config
	15, // 62: Proxy.Post:input_type -> Config
	9,  // 63: Proxy.Delete:input_type -> DeleteRequest
	10, // 64: Proxy.Join:input_type -> JoinRequest
	31, // 65: Storage.Set:input_type -> Store.SetRequest
	33, // 66: Storage.Get:input_type -> Store.GetRequest
	15, // 67: Proxy.Get:output_type -> Config
	14, // 68: Proxy.Put:output_type -> Response
	14, // 69: Proxy.Post:output_type -> Response
	14, // 70: Proxy.Delete:output_type -> Response
	11, // 71: Proxy.Join:output_type -> JoinResponse
	31, // 72: Storage.Set:output_type -> Store.SetRequest
	34, // 73: Storage.Get:output_type -> Store.GetResponse
	67, // [67:74] is the sub-list for method output_type
	60, // [60:67] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_tcp_proto_init() }
func file_tcp_proto_init() {
	if File_tcp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Middleware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Speed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Retries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryBudget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raft_KeyValue_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_SetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_SetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Middleware_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Middleware_Wasm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Middleware_StripPathPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Middleware_Wasm_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Middleware_Wasm_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Middleware_Wasm_Setting_Env); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Middleware_Wasm_Setting_DirectoryMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context_Conn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_TCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_HTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_TCP_PortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_HTTP_MethodList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_HTTP_KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_HTTP_KeyValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_HTTP_Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessEntry_UserAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessEntry_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessEntry_ReverseProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessEntry_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessEntry_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tcp_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Response_Ok)(nil),
		(*Response_Error)(nil),
	}
	file_tcp_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Middleware_Wasm_)(nil),
		(*Middleware_StripPathPrefix_)(nil),
	}
	file_tcp_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Bind_Port)(nil),
		(*Bind_HostPort)(nil),
	}
	file_tcp_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*RequestMatch_Sni)(nil),
		(*RequestMatch_Host)(nil),
		(*RequestMatch_Path)(nil),
		(*RequestMatch_Fixed)(nil),
	}
	file_tcp_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Rule_All)(nil),
		(*Rule_Any)(nil),
		(*Rule_Not)(nil),
		(*Rule_Tcp)(nil),
		(*Rule_Http)(nil),
	}
	file_tcp_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Raft_Log_KeyValue)(nil),
	}
	file_tcp_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*Rule_TCP_Port)(nil),
		(*Rule_TCP_Ports)(nil),
		(*Rule_TCP_Sni)(nil),
	}
	file_tcp_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*Rule_HTTP_Methods)(nil),
		(*Rule_HTTP_Path_)(nil),
		(*Rule_HTTP_Headers)(nil),
		(*Rule_HTTP_QueryParam)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tcp_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tcp_proto_goTypes,
		DependencyIndexes: file_tcp_proto_depIdxs,
		EnumInfos:         file_tcp_proto_enumTypes,
		MessageInfos:      file_tcp_proto_msgTypes,
	}.Build()
	File_tcp_proto = out.File
	file_tcp_proto_rawDesc = nil
	file_tcp_proto_goTypes = nil
	file_tcp_proto_depIdxs = nil
}
