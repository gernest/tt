// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.5.1
// source: tcp.proto

package api

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Protocol exposes
type Protocol int32

const (
	Protocol_TCP       Protocol = 0
	Protocol_UDP       Protocol = 1
	Protocol_HTTP      Protocol = 2
	Protocol_WEBSOCKET Protocol = 3
	Protocol_QUIC      Protocol = 4
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
		2: "HTTP",
		3: "WEBSOCKET",
		4: "QUIC",
	}
	Protocol_value = map[string]int32{
		"TCP":       0,
		"UDP":       1,
		"HTTP":      2,
		"WEBSOCKET": 3,
		"QUIC":      4,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[0].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[0]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{0}
}

type Route_LoadBalanceAlgo int32

const (
	Route_RoundRobinWeighted Route_LoadBalanceAlgo = 0
	Route_RandomWeighted     Route_LoadBalanceAlgo = 1
	Route_SmoothWeighted     Route_LoadBalanceAlgo = 2
)

// Enum value maps for Route_LoadBalanceAlgo.
var (
	Route_LoadBalanceAlgo_name = map[int32]string{
		0: "RoundRobinWeighted",
		1: "RandomWeighted",
		2: "SmoothWeighted",
	}
	Route_LoadBalanceAlgo_value = map[string]int32{
		"RoundRobinWeighted": 0,
		"RandomWeighted":     1,
		"SmoothWeighted":     2,
	}
)

func (x Route_LoadBalanceAlgo) Enum() *Route_LoadBalanceAlgo {
	p := new(Route_LoadBalanceAlgo)
	*p = x
	return p
}

func (x Route_LoadBalanceAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Route_LoadBalanceAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[1].Descriptor()
}

func (Route_LoadBalanceAlgo) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[1]
}

func (x Route_LoadBalanceAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Route_LoadBalanceAlgo.Descriptor instead.
func (Route_LoadBalanceAlgo) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{8, 0}
}

type Rule_HTTP_Method int32

const (
	Rule_HTTP_GET     Rule_HTTP_Method = 0
	Rule_HTTP_POST    Rule_HTTP_Method = 1
	Rule_HTTP_PUT     Rule_HTTP_Method = 2
	Rule_HTTP_DELETE  Rule_HTTP_Method = 3
	Rule_HTTP_PATCH   Rule_HTTP_Method = 4
	Rule_HTTP_OPTIONS Rule_HTTP_Method = 5
	Rule_HTTP_CONNECT Rule_HTTP_Method = 6
	Rule_HTTP_HEAD    Rule_HTTP_Method = 7
	Rule_HTTP_TRACE   Rule_HTTP_Method = 8
	Rule_HTTP_ALL     Rule_HTTP_Method = 9
)

// Enum value maps for Rule_HTTP_Method.
var (
	Rule_HTTP_Method_name = map[int32]string{
		0: "GET",
		1: "POST",
		2: "PUT",
		3: "DELETE",
		4: "PATCH",
		5: "OPTIONS",
		6: "CONNECT",
		7: "HEAD",
		8: "TRACE",
		9: "ALL",
	}
	Rule_HTTP_Method_value = map[string]int32{
		"GET":     0,
		"POST":    1,
		"PUT":     2,
		"DELETE":  3,
		"PATCH":   4,
		"OPTIONS": 5,
		"CONNECT": 6,
		"HEAD":    7,
		"TRACE":   8,
		"ALL":     9,
	}
)

func (x Rule_HTTP_Method) Enum() *Rule_HTTP_Method {
	p := new(Rule_HTTP_Method)
	*p = x
	return p
}

func (x Rule_HTTP_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_HTTP_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[2].Descriptor()
}

func (Rule_HTTP_Method) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[2]
}

func (x Rule_HTTP_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_HTTP_Method.Descriptor instead.
func (Rule_HTTP_Method) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14, 2, 0}
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{0}
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []string `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteRequest) GetRoutes() []string {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*Response_Ok
	//	*Response_Error
	Result isResponse_Result `protobuf_oneof:"result"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{2}
}

func (m *Response) GetResult() isResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Response) GetOk() bool {
	if x, ok := x.GetResult().(*Response_Ok); ok {
		return x.Ok
	}
	return false
}

func (x *Response) GetError() string {
	if x, ok := x.GetResult().(*Response_Error); ok {
		return x.Error
	}
	return ""
}

type isResponse_Result interface {
	isResponse_Result()
}

type Response_Ok struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3,oneof"`
}

type Response_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*Response_Ok) isResponse_Result() {}

func (*Response_Error) isResponse_Result() {}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{3}
}

func (x *Config) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type WeightedAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr         *Address          `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Weight       int32             `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	MetricLabels map[string]string `protobuf:"bytes,4,rep,name=metric_labels,json=metricLabels,proto3" json:"metric_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WeightedAddr) Reset() {
	*x = WeightedAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedAddr) ProtoMessage() {}

func (x *WeightedAddr) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedAddr.ProtoReflect.Descriptor instead.
func (*WeightedAddr) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{4}
}

func (x *WeightedAddr) GetAddr() *Address {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *WeightedAddr) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WeightedAddr) GetMetricLabels() map[string]string {
	if x != nil {
		return x.MetricLabels
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{5}
}

func (x *Address) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Middleware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Middleware) Reset() {
	*x = Middleware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Middleware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Middleware) ProtoMessage() {}

func (x *Middleware) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Middleware.ProtoReflect.Descriptor instead.
func (*Middleware) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{6}
}

type Bind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to To:
	//	*Bind_Port
	//	*Bind_HostPort
	To isBind_To `protobuf_oneof:"to"`
}

func (x *Bind) Reset() {
	*x = Bind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bind) ProtoMessage() {}

func (x *Bind) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bind.ProtoReflect.Descriptor instead.
func (*Bind) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{7}
}

func (m *Bind) GetTo() isBind_To {
	if m != nil {
		return m.To
	}
	return nil
}

func (x *Bind) GetPort() int32 {
	if x, ok := x.GetTo().(*Bind_Port); ok {
		return x.Port
	}
	return 0
}

func (x *Bind) GetHostPort() string {
	if x, ok := x.GetTo().(*Bind_HostPort); ok {
		return x.HostPort
	}
	return ""
}

type isBind_To interface {
	isBind_To()
}

type Bind_Port struct {
	Port int32 `protobuf:"varint,1,opt,name=port,proto3,oneof"`
}

type Bind_HostPort struct {
	HostPort string `protobuf:"bytes,2,opt,name=hostPort,proto3,oneof"`
}

func (*Bind_Port) isBind_To() {}

func (*Bind_HostPort) isBind_To() {}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bind                *Bind                 `protobuf:"bytes,1,opt,name=bind,proto3" json:"bind,omitempty"`
	Condition           *RequestMatch         `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	MetricsLabels       map[string]string     `protobuf:"bytes,3,rep,name=metrics_labels,json=metricsLabels,proto3" json:"metrics_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Retries             *Retries              `protobuf:"bytes,4,opt,name=retries,proto3" json:"retries,omitempty"`
	Timeout             *duration.Duration    `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	KeepAlive           *duration.Duration    `protobuf:"bytes,6,opt,name=keepAlive,proto3" json:"keepAlive,omitempty"`
	Endpoint            *WeightedAddr         `protobuf:"bytes,7,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	LoadBalance         []*WeightedAddr       `protobuf:"bytes,8,rep,name=load_balance,json=loadBalance,proto3" json:"load_balance,omitempty"`
	LoadBalanceAlgo     Route_LoadBalanceAlgo `protobuf:"varint,9,opt,name=load_balance_algo,json=loadBalanceAlgo,proto3,enum=Route_LoadBalanceAlgo" json:"load_balance_algo,omitempty"`
	AllowAcme           bool                  `protobuf:"varint,10,opt,name=allow_acme,json=allowAcme,proto3" json:"allow_acme,omitempty"`
	EnableOptimizedCopy bool                  `protobuf:"varint,11,opt,name=enable_optimized_copy,json=enableOptimizedCopy,proto3" json:"enable_optimized_copy,omitempty"`
	Speed               *Speed                `protobuf:"bytes,12,opt,name=speed,proto3" json:"speed,omitempty"`
	Name                string                `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Rule                *Rule                 `protobuf:"bytes,14,opt,name=rule,proto3" json:"rule,omitempty"`
	Priority            int32                 `protobuf:"varint,15,opt,name=priority,proto3" json:"priority,omitempty"`
	Middlewares         []*Middleware         `protobuf:"bytes,16,rep,name=middlewares,proto3" json:"middlewares,omitempty"`
	Protocol            Protocol              `protobuf:"varint,17,opt,name=protocol,proto3,enum=Protocol" json:"protocol,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{8}
}

func (x *Route) GetBind() *Bind {
	if x != nil {
		return x.Bind
	}
	return nil
}

func (x *Route) GetCondition() *RequestMatch {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Route) GetMetricsLabels() map[string]string {
	if x != nil {
		return x.MetricsLabels
	}
	return nil
}

func (x *Route) GetRetries() *Retries {
	if x != nil {
		return x.Retries
	}
	return nil
}

func (x *Route) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Route) GetKeepAlive() *duration.Duration {
	if x != nil {
		return x.KeepAlive
	}
	return nil
}

func (x *Route) GetEndpoint() *WeightedAddr {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Route) GetLoadBalance() []*WeightedAddr {
	if x != nil {
		return x.LoadBalance
	}
	return nil
}

func (x *Route) GetLoadBalanceAlgo() Route_LoadBalanceAlgo {
	if x != nil {
		return x.LoadBalanceAlgo
	}
	return Route_RoundRobinWeighted
}

func (x *Route) GetAllowAcme() bool {
	if x != nil {
		return x.AllowAcme
	}
	return false
}

func (x *Route) GetEnableOptimizedCopy() bool {
	if x != nil {
		return x.EnableOptimizedCopy
	}
	return false
}

func (x *Route) GetSpeed() *Speed {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *Route) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Route) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Route) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Route) GetMiddlewares() []*Middleware {
	if x != nil {
		return x.Middlewares
	}
	return nil
}

func (x *Route) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_TCP
}

// Speed defines rate limiting of how fast data willl be copied. This is a
// described in bytes units
// "B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"
//
// I you want do have upload speed of up to 40 mp per seconds then you can set
// downstream="20MiB/s"
type Speed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rate at which bytes are written to downstream connection. By downstream
	// connection we are refering to a connection established on tt server by the
	// world
	//   World => tt => Internal
	//   World [==> downstream connection] tt => Internal
	Downstream string `protobuf:"bytes,1,opt,name=downstream,proto3" json:"downstream,omitempty"`
	// The rate at which bytes are written to upstream connection. By upstream
	// connection we are refering to a connection established by tt server to the
	// configured internal service.
	//   World => tt => Internal
	//   World => tt [=> upstream connection] Internal
	Upstream string `protobuf:"bytes,2,opt,name=upstream,proto3" json:"upstream,omitempty"`
}

func (x *Speed) Reset() {
	*x = Speed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speed) ProtoMessage() {}

func (x *Speed) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speed.ProtoReflect.Descriptor instead.
func (*Speed) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{9}
}

func (x *Speed) GetDownstream() string {
	if x != nil {
		return x.Downstream
	}
	return ""
}

func (x *Speed) GetUpstream() string {
	if x != nil {
		return x.Upstream
	}
	return ""
}

type Retries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool         `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Budget  *RetryBudget `protobuf:"bytes,2,opt,name=budget,proto3" json:"budget,omitempty"`
}

func (x *Retries) Reset() {
	*x = Retries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Retries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retries) ProtoMessage() {}

func (x *Retries) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retries.ProtoReflect.Descriptor instead.
func (*Retries) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10}
}

func (x *Retries) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Retries) GetBudget() *RetryBudget {
	if x != nil {
		return x.Budget
	}
	return nil
}

type RetryBudget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ratio of additional traffic that may be added by retries.  A
	// retry_ratio of 0.1 means that 1 retry may be attempted for every 10 regular
	// requests.  A retry_ratio of 1.0 means that 1 retry may be attempted for
	// every 1 regular request (in other words, total request load may be doubled
	// as a result of retries).
	RetryRatio float32 `protobuf:"fixed32,1,opt,name=retry_ratio,json=retryRatio,proto3" json:"retry_ratio,omitempty"`
	// The proxy may always attempt this number of retries per second, even if it
	// would violate the retry_ratio.  This is to allow retries to happen even
	// when the request rate is very low.
	MinRetriesPerSecond uint32 `protobuf:"varint,2,opt,name=min_retries_per_second,json=minRetriesPerSecond,proto3" json:"min_retries_per_second,omitempty"`
	// This duration indicates for how long requests should be considered for the
	// purposes of enforcing the retry_ratio.  A higher value considers a larger
	// window and therefore allows burstier retries.
	Ttl *duration.Duration `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *RetryBudget) Reset() {
	*x = RetryBudget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryBudget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryBudget) ProtoMessage() {}

func (x *RetryBudget) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryBudget.ProtoReflect.Descriptor instead.
func (*RetryBudget) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{11}
}

func (x *RetryBudget) GetRetryRatio() float32 {
	if x != nil {
		return x.RetryRatio
	}
	return 0
}

func (x *RetryBudget) GetMinRetriesPerSecond() uint32 {
	if x != nil {
		return x.MinRetriesPerSecond
	}
	return 0
}

func (x *RetryBudget) GetTtl() *duration.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type RequestMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*RequestMatch_Sni
	//	*RequestMatch_Host
	//	*RequestMatch_Path
	//	*RequestMatch_Fixed
	Match isRequestMatch_Match `protobuf_oneof:"match"`
}

func (x *RequestMatch) Reset() {
	*x = RequestMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMatch) ProtoMessage() {}

func (x *RequestMatch) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMatch.ProtoReflect.Descriptor instead.
func (*RequestMatch) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{12}
}

func (m *RequestMatch) GetMatch() isRequestMatch_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *RequestMatch) GetSni() string {
	if x, ok := x.GetMatch().(*RequestMatch_Sni); ok {
		return x.Sni
	}
	return ""
}

func (x *RequestMatch) GetHost() string {
	if x, ok := x.GetMatch().(*RequestMatch_Host); ok {
		return x.Host
	}
	return ""
}

func (x *RequestMatch) GetPath() string {
	if x, ok := x.GetMatch().(*RequestMatch_Path); ok {
		return x.Path
	}
	return ""
}

func (x *RequestMatch) GetFixed() *empty.Empty {
	if x, ok := x.GetMatch().(*RequestMatch_Fixed); ok {
		return x.Fixed
	}
	return nil
}

type isRequestMatch_Match interface {
	isRequestMatch_Match()
}

type RequestMatch_Sni struct {
	Sni string `protobuf:"bytes,1,opt,name=sni,proto3,oneof"`
}

type RequestMatch_Host struct {
	Host string `protobuf:"bytes,2,opt,name=host,proto3,oneof"`
}

type RequestMatch_Path struct {
	Path string `protobuf:"bytes,3,opt,name=path,proto3,oneof"`
}

type RequestMatch_Fixed struct {
	Fixed *empty.Empty `protobuf:"bytes,4,opt,name=fixed,proto3,oneof"`
}

func (*RequestMatch_Sni) isRequestMatch_Match() {}

func (*RequestMatch_Host) isRequestMatch_Match() {}

func (*RequestMatch_Path) isRequestMatch_Match() {}

func (*RequestMatch_Fixed) isRequestMatch_Match() {}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Protocol   Protocol      `protobuf:"varint,2,opt,name=protocol,proto3,enum=Protocol" json:"protocol,omitempty"`
	Downstream *Context_Conn `protobuf:"bytes,3,opt,name=downstream,proto3" json:"downstream,omitempty"`
	Upstream   *Context_Conn `protobuf:"bytes,4,opt,name=upstream,proto3" json:"upstream,omitempty"`
	Info       *Context_Info `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{13}
}

func (x *Context) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Context) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_TCP
}

func (x *Context) GetDownstream() *Context_Conn {
	if x != nil {
		return x.Downstream
	}
	return nil
}

func (x *Context) GetUpstream() *Context_Conn {
	if x != nil {
		return x.Upstream
	}
	return nil
}

func (x *Context) GetInfo() *Context_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*Rule_All
	//	*Rule_Any
	//	*Rule_Not
	//	*Rule_Tcp
	//	*Rule_Http
	Match isRule_Match `protobuf_oneof:"match"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14}
}

func (m *Rule) GetMatch() isRule_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *Rule) GetAll() *Rule_List {
	if x, ok := x.GetMatch().(*Rule_All); ok {
		return x.All
	}
	return nil
}

func (x *Rule) GetAny() *Rule_List {
	if x, ok := x.GetMatch().(*Rule_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Rule) GetNot() *Rule {
	if x, ok := x.GetMatch().(*Rule_Not); ok {
		return x.Not
	}
	return nil
}

func (x *Rule) GetTcp() *Rule_TCP {
	if x, ok := x.GetMatch().(*Rule_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *Rule) GetHttp() *Rule_HTTP {
	if x, ok := x.GetMatch().(*Rule_Http); ok {
		return x.Http
	}
	return nil
}

type isRule_Match interface {
	isRule_Match()
}

type Rule_All struct {
	All *Rule_List `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type Rule_Any struct {
	Any *Rule_List `protobuf:"bytes,2,opt,name=any,proto3,oneof"`
}

type Rule_Not struct {
	Not *Rule `protobuf:"bytes,3,opt,name=not,proto3,oneof"`
}

type Rule_Tcp struct {
	Tcp *Rule_TCP `protobuf:"bytes,4,opt,name=tcp,proto3,oneof"`
}

type Rule_Http struct {
	Http *Rule_HTTP `protobuf:"bytes,5,opt,name=http,proto3,oneof"`
}

func (*Rule_All) isRule_Match() {}

func (*Rule_Any) isRule_Match() {}

func (*Rule_Not) isRule_Match() {}

func (*Rule_Tcp) isRule_Match() {}

func (*Rule_Http) isRule_Match() {}

type Context_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesRead    int64 `protobuf:"varint,1,opt,name=bytesRead,proto3" json:"bytesRead,omitempty"`
	BytesWritten int64 `protobuf:"varint,2,opt,name=bytesWritten,proto3" json:"bytesWritten,omitempty"`
}

func (x *Context_Stat) Reset() {
	*x = Context_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context_Stat) ProtoMessage() {}

func (x *Context_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context_Stat.ProtoReflect.Descriptor instead.
func (*Context_Stat) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Context_Stat) GetBytesRead() int64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *Context_Stat) GetBytesWritten() int64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

type Context_Conn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAddress  string        `protobuf:"bytes,1,opt,name=localAddress,proto3" json:"localAddress,omitempty"`
	RemoteAddress string        `protobuf:"bytes,2,opt,name=remoteAddress,proto3" json:"remoteAddress,omitempty"`
	Stat          *Context_Stat `protobuf:"bytes,3,opt,name=stat,proto3" json:"stat,omitempty"`
}

func (x *Context_Conn) Reset() {
	*x = Context_Conn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context_Conn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context_Conn) ProtoMessage() {}

func (x *Context_Conn) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context_Conn.ProtoReflect.Descriptor instead.
func (*Context_Conn) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{13, 1}
}

func (x *Context_Conn) GetLocalAddress() string {
	if x != nil {
		return x.LocalAddress
	}
	return ""
}

func (x *Context_Conn) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *Context_Conn) GetStat() *Context_Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

type Context_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sni        *wrappers.StringValue `protobuf:"bytes,1,opt,name=sni,proto3" json:"sni,omitempty"`
	Host       *wrappers.StringValue `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Path       *wrappers.StringValue `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	RouteName  string                `protobuf:"bytes,4,opt,name=routeName,proto3" json:"routeName,omitempty"`
	ListenPort int32                 `protobuf:"varint,5,opt,name=listenPort,proto3" json:"listenPort,omitempty"`
}

func (x *Context_Info) Reset() {
	*x = Context_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context_Info) ProtoMessage() {}

func (x *Context_Info) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context_Info.ProtoReflect.Descriptor instead.
func (*Context_Info) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{13, 2}
}

func (x *Context_Info) GetSni() *wrappers.StringValue {
	if x != nil {
		return x.Sni
	}
	return nil
}

func (x *Context_Info) GetHost() *wrappers.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *Context_Info) GetPath() *wrappers.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Context_Info) GetRouteName() string {
	if x != nil {
		return x.RouteName
	}
	return ""
}

func (x *Context_Info) GetListenPort() int32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

type Rule_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Rule_List) Reset() {
	*x = Rule_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_List) ProtoMessage() {}

func (x *Rule_List) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_List.ProtoReflect.Descriptor instead.
func (*Rule_List) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Rule_List) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Rule_TCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*Rule_TCP_Port
	//	*Rule_TCP_Ports
	//	*Rule_TCP_Sni
	Match isRule_TCP_Match `protobuf_oneof:"match"`
}

func (x *Rule_TCP) Reset() {
	*x = Rule_TCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_TCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_TCP) ProtoMessage() {}

func (x *Rule_TCP) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_TCP.ProtoReflect.Descriptor instead.
func (*Rule_TCP) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14, 1}
}

func (m *Rule_TCP) GetMatch() isRule_TCP_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *Rule_TCP) GetPort() uint32 {
	if x, ok := x.GetMatch().(*Rule_TCP_Port); ok {
		return x.Port
	}
	return 0
}

func (x *Rule_TCP) GetPorts() *Rule_TCP_PortRange {
	if x, ok := x.GetMatch().(*Rule_TCP_Ports); ok {
		return x.Ports
	}
	return nil
}

func (x *Rule_TCP) GetSni() string {
	if x, ok := x.GetMatch().(*Rule_TCP_Sni); ok {
		return x.Sni
	}
	return ""
}

type isRule_TCP_Match interface {
	isRule_TCP_Match()
}

type Rule_TCP_Port struct {
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3,oneof"`
}

type Rule_TCP_Ports struct {
	Ports *Rule_TCP_PortRange `protobuf:"bytes,2,opt,name=ports,proto3,oneof"`
}

type Rule_TCP_Sni struct {
	Sni string `protobuf:"bytes,3,opt,name=sni,proto3,oneof"`
}

func (*Rule_TCP_Port) isRule_TCP_Match() {}

func (*Rule_TCP_Ports) isRule_TCP_Match() {}

func (*Rule_TCP_Sni) isRule_TCP_Match() {}

type Rule_HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*Rule_HTTP_Methods_
	//	*Rule_HTTP_Path
	//	*Rule_HTTP_Host
	//	*Rule_HTTP_Headers_
	Match isRule_HTTP_Match `protobuf_oneof:"match"`
}

func (x *Rule_HTTP) Reset() {
	*x = Rule_HTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_HTTP) ProtoMessage() {}

func (x *Rule_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_HTTP.ProtoReflect.Descriptor instead.
func (*Rule_HTTP) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14, 2}
}

func (m *Rule_HTTP) GetMatch() isRule_HTTP_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *Rule_HTTP) GetMethods() *Rule_HTTP_Methods {
	if x, ok := x.GetMatch().(*Rule_HTTP_Methods_); ok {
		return x.Methods
	}
	return nil
}

func (x *Rule_HTTP) GetPath() *Rule_StringMatch {
	if x, ok := x.GetMatch().(*Rule_HTTP_Path); ok {
		return x.Path
	}
	return nil
}

func (x *Rule_HTTP) GetHost() string {
	if x, ok := x.GetMatch().(*Rule_HTTP_Host); ok {
		return x.Host
	}
	return ""
}

func (x *Rule_HTTP) GetHeaders() *Rule_HTTP_Headers {
	if x, ok := x.GetMatch().(*Rule_HTTP_Headers_); ok {
		return x.Headers
	}
	return nil
}

type isRule_HTTP_Match interface {
	isRule_HTTP_Match()
}

type Rule_HTTP_Methods_ struct {
	Methods *Rule_HTTP_Methods `protobuf:"bytes,1,opt,name=methods,proto3,oneof"`
}

type Rule_HTTP_Path struct {
	Path *Rule_StringMatch `protobuf:"bytes,2,opt,name=path,proto3,oneof"`
}

type Rule_HTTP_Host struct {
	Host string `protobuf:"bytes,3,opt,name=host,proto3,oneof"`
}

type Rule_HTTP_Headers_ struct {
	Headers *Rule_HTTP_Headers `protobuf:"bytes,4,opt,name=headers,proto3,oneof"`
}

func (*Rule_HTTP_Methods_) isRule_HTTP_Match() {}

func (*Rule_HTTP_Path) isRule_HTTP_Match() {}

func (*Rule_HTTP_Host) isRule_HTTP_Match() {}

func (*Rule_HTTP_Headers_) isRule_HTTP_Match() {}

type Rule_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Rule_StringMatch `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Rule_Header) Reset() {
	*x = Rule_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_Header) ProtoMessage() {}

func (x *Rule_Header) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_Header.ProtoReflect.Descriptor instead.
func (*Rule_Header) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14, 3}
}

func (x *Rule_Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Rule_Header) GetValue() *Rule_StringMatch {
	if x != nil {
		return x.Value
	}
	return nil
}

type Rule_StringMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//	*Rule_StringMatch_Exact
	//	*Rule_StringMatch_Prefix
	//	*Rule_StringMatch_Regexp
	Match isRule_StringMatch_Match `protobuf_oneof:"match"`
}

func (x *Rule_StringMatch) Reset() {
	*x = Rule_StringMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_StringMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_StringMatch) ProtoMessage() {}

func (x *Rule_StringMatch) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_StringMatch.ProtoReflect.Descriptor instead.
func (*Rule_StringMatch) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14, 4}
}

func (m *Rule_StringMatch) GetMatch() isRule_StringMatch_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *Rule_StringMatch) GetExact() string {
	if x, ok := x.GetMatch().(*Rule_StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (x *Rule_StringMatch) GetPrefix() string {
	if x, ok := x.GetMatch().(*Rule_StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *Rule_StringMatch) GetRegexp() string {
	if x, ok := x.GetMatch().(*Rule_StringMatch_Regexp); ok {
		return x.Regexp
	}
	return ""
}

type isRule_StringMatch_Match interface {
	isRule_StringMatch_Match()
}

type Rule_StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type Rule_StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}

type Rule_StringMatch_Regexp struct {
	Regexp string `protobuf:"bytes,3,opt,name=regexp,proto3,oneof"`
}

func (*Rule_StringMatch_Exact) isRule_StringMatch_Match() {}

func (*Rule_StringMatch_Prefix) isRule_StringMatch_Match() {}

func (*Rule_StringMatch_Regexp) isRule_StringMatch_Match() {}

type Rule_TCP_PortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Rule_TCP_PortRange) Reset() {
	*x = Rule_TCP_PortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_TCP_PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_TCP_PortRange) ProtoMessage() {}

func (x *Rule_TCP_PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_TCP_PortRange.ProtoReflect.Descriptor instead.
func (*Rule_TCP_PortRange) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14, 1, 0}
}

func (x *Rule_TCP_PortRange) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Rule_TCP_PortRange) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Rule_HTTP_Methods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Methods []Rule_HTTP_Method `protobuf:"varint,1,rep,packed,name=methods,proto3,enum=Rule_HTTP_Method" json:"methods,omitempty"`
}

func (x *Rule_HTTP_Methods) Reset() {
	*x = Rule_HTTP_Methods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_HTTP_Methods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_HTTP_Methods) ProtoMessage() {}

func (x *Rule_HTTP_Methods) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_HTTP_Methods.ProtoReflect.Descriptor instead.
func (*Rule_HTTP_Methods) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14, 2, 0}
}

func (x *Rule_HTTP_Methods) GetMethods() []Rule_HTTP_Method {
	if x != nil {
		return x.Methods
	}
	return nil
}

type Rule_HTTP_Headers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []*Rule_Header `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *Rule_HTTP_Headers) Reset() {
	*x = Rule_HTTP_Headers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tcp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_HTTP_Headers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_HTTP_Headers) ProtoMessage() {}

func (x *Rule_HTTP_Headers) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_HTTP_Headers.ProtoReflect.Descriptor instead.
func (*Rule_HTTP_Headers) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{14, 2, 1}
}

func (x *Rule_HTTP_Headers) GetHeaders() []*Rule_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

var File_tcp_proto protoreflect.FileDescriptor

var file_tcp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x22, 0x3e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x28, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xcb, 0x01, 0x0a,
	0x0c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x22, 0x40, 0x0a, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x42, 0x04, 0x0a, 0x02, 0x74, 0x6f, 0x22, 0xeb, 0x06, 0x0a, 0x05, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x2b,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0c, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x52,
	0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x11,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x52,
	0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x67, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x43,
	0x6f, 0x70, 0x79, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0b,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0b,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x10, 0x02, 0x22, 0x43, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x49, 0x0a, 0x07,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52,
	0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2b, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x03, 0x73,
	0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6e, 0x69, 0x12,
	0x14, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x05, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x22, 0xd7, 0x04, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x48, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x1a, 0x73,
	0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x74, 0x1a, 0xd8, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x03,
	0x73, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x6e, 0x69, 0x12, 0x30, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xa3,
	0x07, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x19, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6e,
	0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x43, 0x50, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63,
	0x70, 0x12, 0x20, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x00, 0x52, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x1a, 0x23, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x96, 0x01, 0x0a, 0x03, 0x54, 0x43, 0x50,
	0x12, 0x14, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x43, 0x50,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x73, 0x6e, 0x69, 0x1a, 0x2f, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x1a, 0x8e, 0x03, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x36, 0x0a, 0x07, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x1a, 0x31, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x73, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x07,
	0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x45, 0x41, 0x44, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x08,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x09, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x1a, 0x43, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x62, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2a, 0x3f, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x51,
	0x55, 0x49, 0x43, 0x10, 0x04, 0x32, 0x83, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x1e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x19, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x07, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x07, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x0e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x67,
	0x69, 0x72, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x72, 0x6e, 0x65, 0x73,
	0x74, 0x2f, 0x74, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tcp_proto_rawDescOnce sync.Once
	file_tcp_proto_rawDescData = file_tcp_proto_rawDesc
)

func file_tcp_proto_rawDescGZIP() []byte {
	file_tcp_proto_rawDescOnce.Do(func() {
		file_tcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_tcp_proto_rawDescData)
	})
	return file_tcp_proto_rawDescData
}

var file_tcp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tcp_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_tcp_proto_goTypes = []interface{}{
	(Protocol)(0),                // 0: Protocol
	(Route_LoadBalanceAlgo)(0),   // 1: Route.LoadBalanceAlgo
	(Rule_HTTP_Method)(0),        // 2: Rule.HTTP.Method
	(*ConfigRequest)(nil),        // 3: ConfigRequest
	(*DeleteRequest)(nil),        // 4: DeleteRequest
	(*Response)(nil),             // 5: Response
	(*Config)(nil),               // 6: Config
	(*WeightedAddr)(nil),         // 7: WeightedAddr
	(*Address)(nil),              // 8: Address
	(*Middleware)(nil),           // 9: Middleware
	(*Bind)(nil),                 // 10: Bind
	(*Route)(nil),                // 11: Route
	(*Speed)(nil),                // 12: Speed
	(*Retries)(nil),              // 13: Retries
	(*RetryBudget)(nil),          // 14: RetryBudget
	(*RequestMatch)(nil),         // 15: RequestMatch
	(*Context)(nil),              // 16: Context
	(*Rule)(nil),                 // 17: Rule
	nil,                          // 18: WeightedAddr.MetricLabelsEntry
	nil,                          // 19: Route.MetricsLabelsEntry
	(*Context_Stat)(nil),         // 20: Context.Stat
	(*Context_Conn)(nil),         // 21: Context.Conn
	(*Context_Info)(nil),         // 22: Context.Info
	(*Rule_List)(nil),            // 23: Rule.List
	(*Rule_TCP)(nil),             // 24: Rule.TCP
	(*Rule_HTTP)(nil),            // 25: Rule.HTTP
	(*Rule_Header)(nil),          // 26: Rule.Header
	(*Rule_StringMatch)(nil),     // 27: Rule.StringMatch
	(*Rule_TCP_PortRange)(nil),   // 28: Rule.TCP.PortRange
	(*Rule_HTTP_Methods)(nil),    // 29: Rule.HTTP.Methods
	(*Rule_HTTP_Headers)(nil),    // 30: Rule.HTTP.Headers
	(*duration.Duration)(nil),    // 31: google.protobuf.Duration
	(*empty.Empty)(nil),          // 32: google.protobuf.Empty
	(*wrappers.StringValue)(nil), // 33: google.protobuf.StringValue
}
var file_tcp_proto_depIdxs = []int32{
	11, // 0: Config.routes:type_name -> Route
	8,  // 1: WeightedAddr.addr:type_name -> Address
	18, // 2: WeightedAddr.metric_labels:type_name -> WeightedAddr.MetricLabelsEntry
	10, // 3: Route.bind:type_name -> Bind
	15, // 4: Route.condition:type_name -> RequestMatch
	19, // 5: Route.metrics_labels:type_name -> Route.MetricsLabelsEntry
	13, // 6: Route.retries:type_name -> Retries
	31, // 7: Route.timeout:type_name -> google.protobuf.Duration
	31, // 8: Route.keepAlive:type_name -> google.protobuf.Duration
	7,  // 9: Route.endpoint:type_name -> WeightedAddr
	7,  // 10: Route.load_balance:type_name -> WeightedAddr
	1,  // 11: Route.load_balance_algo:type_name -> Route.LoadBalanceAlgo
	12, // 12: Route.speed:type_name -> Speed
	17, // 13: Route.rule:type_name -> Rule
	9,  // 14: Route.middlewares:type_name -> Middleware
	0,  // 15: Route.protocol:type_name -> Protocol
	14, // 16: Retries.budget:type_name -> RetryBudget
	31, // 17: RetryBudget.ttl:type_name -> google.protobuf.Duration
	32, // 18: RequestMatch.fixed:type_name -> google.protobuf.Empty
	0,  // 19: Context.protocol:type_name -> Protocol
	21, // 20: Context.downstream:type_name -> Context.Conn
	21, // 21: Context.upstream:type_name -> Context.Conn
	22, // 22: Context.info:type_name -> Context.Info
	23, // 23: Rule.all:type_name -> Rule.List
	23, // 24: Rule.any:type_name -> Rule.List
	17, // 25: Rule.not:type_name -> Rule
	24, // 26: Rule.tcp:type_name -> Rule.TCP
	25, // 27: Rule.http:type_name -> Rule.HTTP
	20, // 28: Context.Conn.stat:type_name -> Context.Stat
	33, // 29: Context.Info.sni:type_name -> google.protobuf.StringValue
	33, // 30: Context.Info.host:type_name -> google.protobuf.StringValue
	33, // 31: Context.Info.path:type_name -> google.protobuf.StringValue
	17, // 32: Rule.List.rules:type_name -> Rule
	28, // 33: Rule.TCP.ports:type_name -> Rule.TCP.PortRange
	29, // 34: Rule.HTTP.methods:type_name -> Rule.HTTP.Methods
	27, // 35: Rule.HTTP.path:type_name -> Rule.StringMatch
	30, // 36: Rule.HTTP.headers:type_name -> Rule.HTTP.Headers
	27, // 37: Rule.Header.value:type_name -> Rule.StringMatch
	2,  // 38: Rule.HTTP.Methods.methods:type_name -> Rule.HTTP.Method
	26, // 39: Rule.HTTP.Headers.headers:type_name -> Rule.Header
	3,  // 40: Proxy.Get:input_type -> ConfigRequest
	6,  // 41: Proxy.Put:input_type -> Config
	6,  // 42: Proxy.Post:input_type -> Config
	4,  // 43: Proxy.Delete:input_type -> DeleteRequest
	6,  // 44: Proxy.Get:output_type -> Config
	5,  // 45: Proxy.Put:output_type -> Response
	5,  // 46: Proxy.Post:output_type -> Response
	5,  // 47: Proxy.Delete:output_type -> Response
	44, // [44:48] is the sub-list for method output_type
	40, // [40:44] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_tcp_proto_init() }
func file_tcp_proto_init() {
	if File_tcp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Middleware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Speed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Retries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryBudget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context_Conn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_TCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_HTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_StringMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_TCP_PortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_HTTP_Methods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tcp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_HTTP_Headers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tcp_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Response_Ok)(nil),
		(*Response_Error)(nil),
	}
	file_tcp_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Bind_Port)(nil),
		(*Bind_HostPort)(nil),
	}
	file_tcp_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RequestMatch_Sni)(nil),
		(*RequestMatch_Host)(nil),
		(*RequestMatch_Path)(nil),
		(*RequestMatch_Fixed)(nil),
	}
	file_tcp_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Rule_All)(nil),
		(*Rule_Any)(nil),
		(*Rule_Not)(nil),
		(*Rule_Tcp)(nil),
		(*Rule_Http)(nil),
	}
	file_tcp_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Rule_TCP_Port)(nil),
		(*Rule_TCP_Ports)(nil),
		(*Rule_TCP_Sni)(nil),
	}
	file_tcp_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Rule_HTTP_Methods_)(nil),
		(*Rule_HTTP_Path)(nil),
		(*Rule_HTTP_Host)(nil),
		(*Rule_HTTP_Headers_)(nil),
	}
	file_tcp_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Rule_StringMatch_Exact)(nil),
		(*Rule_StringMatch_Prefix)(nil),
		(*Rule_StringMatch_Regexp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tcp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tcp_proto_goTypes,
		DependencyIndexes: file_tcp_proto_depIdxs,
		EnumInfos:         file_tcp_proto_enumTypes,
		MessageInfos:      file_tcp_proto_msgTypes,
	}.Build()
	File_tcp_proto = out.File
	file_tcp_proto_rawDesc = nil
	file_tcp_proto_goTypes = nil
	file_tcp_proto_depIdxs = nil
}
